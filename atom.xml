<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steve_braveman</title>
  
  <subtitle>技不如人，也绝不甘拜下风！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-21T09:22:54.985Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Steve_braveman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>-模拟退火- [洛谷 P3936]Coloring</title>
    <link href="http://yoursite.com/2019/05/21/81/"/>
    <id>http://yoursite.com/2019/05/21/81/</id>
    <published>2019-05-21T07:23:57.000Z</published>
    <updated>2019-05-21T09:22:54.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P3936" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><del>真是goushi！</del></p><p>这道题让我看出了我是有多非。。。。</p><p>提交了整整6页啊，整整6页！<del>（不过我开小号提交不怕）</del></p><p>其实这道题本身没什么难的，就是随机交换两数，然后在进行判断进行退火的过程就好了。</p><p>为那些处在水深火热的提交中发几个我AC时的参数<del>（估计没啥用）</del>：</p><p>$T:1.0​$</p><p>$\Delta T:0.99998$</p><p>随机数种子：$19* * * *17$<del>这玩意我不说你们也知道</del></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> delta 0.99998</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> random(a, b) ((rand() % (b - a + 1)) + (a))</span></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, c, p[MAXN], G[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>], tot, nowG[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>], _p, chG[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];</span><br><span class="line"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Tp &amp;a, Tp &amp;b)</span> </span>&#123;</span><br><span class="line">    Tp t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Q</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (nowG[i][j] != nowG[i][j - <span class="hljs-number">1</span>]) ans++;</span><br><span class="line">            <span class="hljs-keyword">if</span> (nowG[i][j] != nowG[i - <span class="hljs-number">1</span>][j]) ans++;</span><br><span class="line">            <span class="hljs-keyword">if</span> (nowG[i][j] != nowG[i][j + <span class="hljs-number">1</span>]) ans++;</span><br><span class="line">            <span class="hljs-keyword">if</span> (nowG[i][j] != nowG[i + <span class="hljs-number">1</span>][j]) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(<span class="hljs-keyword">bool</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                chG[i][j] = nowG[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            G[i][j] = chG[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> t = <span class="hljs-number">1.0</span>;</span><br><span class="line">    _p = tot;</span><br><span class="line">    <span class="hljs-keyword">while</span> (t &gt; <span class="hljs-number">1e-14</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x1 = random(<span class="hljs-number">1</span>, n);</span><br><span class="line">        <span class="hljs-keyword">int</span> y1 = random(<span class="hljs-number">1</span>, m);</span><br><span class="line">        <span class="hljs-keyword">int</span> x2 = random(<span class="hljs-number">1</span>, n);</span><br><span class="line">        <span class="hljs-keyword">int</span> y2 = random(<span class="hljs-number">1</span>, m);</span><br><span class="line">        <span class="hljs-keyword">if</span> (nowG[x1][y1] == nowG[x2][y2]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        <span class="hljs-built_in">std</span>::swap(nowG[x1][y1], nowG[x2][y2]);</span><br><span class="line">        <span class="hljs-keyword">int</span> now = Q();</span><br><span class="line">        <span class="hljs-keyword">int</span> dt = now - _p;</span><br><span class="line">        <span class="hljs-keyword">if</span> (dt &lt; <span class="hljs-number">0</span> || (<span class="hljs-built_in">exp</span>(-dt * <span class="hljs-number">1.0</span> / t) * RAND_MAX &gt; ((rand() % <span class="hljs-number">1000000</span>) / <span class="hljs-number">1000000.0</span>))) &#123;</span><br><span class="line">            copy(<span class="hljs-number">1</span>);</span><br><span class="line">            _p = now;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">std</span>::swap(nowG[x1][y1], nowG[x2][y2]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (_p &lt;= tot) &#123;</span><br><span class="line">            tot = _p;</span><br><span class="line">            copy(<span class="hljs-number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        t *= delta;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    srand(<span class="hljs-number">19260817</span>);</span><br><span class="line">    <span class="hljs-comment">// srand(rand() * rand());</span></span><br><span class="line">    <span class="hljs-comment">// srand(rand());</span></span><br><span class="line">    <span class="hljs-comment">// srand(rand());</span></span><br><span class="line">    <span class="hljs-comment">// srand(rand());</span></span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;c);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= c; i++) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> col = rand() % c + <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span> (!p[col]) col = rand() % c + <span class="hljs-number">1</span>;</span><br><span class="line">            G[i][j] = col;</span><br><span class="line">            nowG[i][j] = col;</span><br><span class="line">            p[col]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tot = Q();</span><br><span class="line">    _p = tot;</span><br><span class="line">    SA();</span><br><span class="line">    SA();</span><br><span class="line">    SA();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, G[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3936&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="模拟退火" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>-网络流-最大流-二分图-强连通分量- [洛谷 P3731][HAOI2017]新型城市化</title>
    <link href="http://yoursite.com/2019/05/13/80/"/>
    <id>http://yoursite.com/2019/05/13/80/</id>
    <published>2019-05-13T10:53:20.000Z</published>
    <updated>2019-05-13T11:18:13.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P3731" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><del>这道题太技巧了</del></p><p>用人话说这道题：求出二分图最大匹配的必须边</p><p><del>于是这道题就简单了一半</del></p><p>先按照题意建好二分图，然后在用Dinic跑二分图最大匹配。</p><p>对于每一条边 $(u,v)$，如果这条边满流，那么就连新边 $v -&gt; u$，否则，连 $u -&gt; v$。</p><p>存在这样一个结论：如果边 $(x,y)$ 在最大匹配中，则 $x,y$ 不在同一强连通分量内<del>（我不会证明）</del>。</p><p>所以在残量网络上跑Tarjan就行了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1000010</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 2000000000</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nx, w;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="hljs-number">2</span>], _e[MAXN &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">E</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> x, y;</span><br><span class="line">&#125;a[MAXN &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> _head[MAXN], head[MAXN], ecnt = <span class="hljs-number">1</span>, _ecnt, n, m, col[MAXN], dep[MAXN], cur[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> dfn[MAXN], low[MAXN], tim, st[MAXN], top, num, in[MAXN], r, k, cnt;</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(E x, E y)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> x.x &lt; y.x || (x.x == y.x &amp;&amp; x.y &lt; y.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], w&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;f, head[t], <span class="hljs-number">0</span>&#125;;</span><br><span class="line">    head[t] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">void</span> _add(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t) &#123;</span><br><span class="line">    _e[++_ecnt] = (Edge) &#123;t, _head[f], <span class="hljs-number">0</span>&#125;;</span><br><span class="line">    _head[f] = _ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dep));</span><br><span class="line">    dep[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        cur[i] = head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (dep[to] &gt; INF &amp;&amp; e[i].w) &#123;</span><br><span class="line">                dep[to] = dep[u] + <span class="hljs-number">1</span>;</span><br><span class="line">                q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> dep[t] &lt; INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!l || s == t) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> fl = <span class="hljs-number">0</span>, f;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = cur[s]; i; i = e[i].nx) &#123;</span><br><span class="line">        cur[s] = i;</span><br><span class="line">        <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="hljs-keyword">if</span> (dep[to] == dep[s] + <span class="hljs-number">1</span> &amp;&amp; (f = dfs(to, t, min(l, e[i].w)))) &#123;</span><br><span class="line">            fl += f;</span><br><span class="line">            l -= f;</span><br><span class="line">            e[i].w -= f;</span><br><span class="line">            e[i ^ <span class="hljs-number">1</span>].w += f;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!l) <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> fl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> maxf = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">        maxf += dfs(s, t, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> maxf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++tim;</span><br><span class="line">    st[++top] = u;</span><br><span class="line">    vis[u] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = _head[u]; i; i = _e[i].nx) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = _e[i].v;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vis[v]) low[u] = min(low[u], dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="hljs-keyword">int</span> v;</span><br><span class="line">        <span class="hljs-keyword">do</span> &#123;</span><br><span class="line">            v = st[top--];</span><br><span class="line">            vis[v] = <span class="hljs-number">0</span>;</span><br><span class="line">            in[v] = num;</span><br><span class="line">        &#125; <span class="hljs-keyword">while</span> (u != v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfscol</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> cr)</span> </span>&#123;</span><br><span class="line">    col[x] = cr;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = _head[x]; i; i = _e[i].nx) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> to = _e[i].v;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!col[to]) &#123;</span><br><span class="line">            dfscol(to, <span class="hljs-number">3</span> - cr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    r = n + <span class="hljs-number">1</span>;</span><br><span class="line">    k = r + <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;a[i].x, &amp;a[i].y);</span><br><span class="line">        _add(a[i].x, a[i].y);</span><br><span class="line">        _add(a[i].y, a[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!col[i]) dfscol(i, <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (col[i] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            add(r, i, <span class="hljs-number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (col[i] == <span class="hljs-number">2</span>) &#123;</span><br><span class="line">            add(i, k, <span class="hljs-number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(_head, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(_head));</span><br><span class="line">    _ecnt = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(_e, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(_e));</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (col[a[i].x] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            add(a[i].x, a[i].y, <span class="hljs-number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (col[a[i].y] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            add(a[i].y, a[i].x, <span class="hljs-number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> tot = Dinic(r, k);</span><br><span class="line">    <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="hljs-comment">// if (col[i] == 1) &#123;</span></span><br><span class="line">    <span class="hljs-comment">// for (int j = head[i]; j; j = e[j].nx) &#123;</span></span><br><span class="line">    <span class="hljs-comment">// if (!e[j].w &amp;&amp; e[j].v != r) &#123;</span></span><br><span class="line">    <span class="hljs-comment">// printf("%d -&gt; %d\n", i, e[j].v);</span></span><br><span class="line">    <span class="hljs-comment">// &#125;</span></span><br><span class="line">    <span class="hljs-comment">// &#125;</span></span><br><span class="line">    <span class="hljs-comment">// &#125;</span></span><br><span class="line">    <span class="hljs-comment">// &#125;</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[r]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!e[i].w) &#123;</span><br><span class="line">            _add(to, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (e[i].w) &#123;</span><br><span class="line">            _add(r, to);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = head[to]; j; j = e[j].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> v = e[j].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (v == r) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (e[j].w) &#123;</span><br><span class="line">                _add(to, v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                _add(v, to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[k]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="hljs-comment">// printf("%d -- %d --&gt; %d\n", k, e[i].w, to);</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (e[i].w) &#123;</span><br><span class="line">            _add(k, to);</span><br><span class="line">            <span class="hljs-comment">// printf("%d -&gt; %d\n", to, k);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!e[i].w) &#123;</span><br><span class="line">            _add(to, k);</span><br><span class="line">            <span class="hljs-comment">// printf("%d -&gt; %d\n", k, to);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!dfn[i]) tarjan(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(a));</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (col[i] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = head[i]; j; j = e[j].nx) &#123;</span><br><span class="line">                <span class="hljs-keyword">int</span> v = e[j].v;</span><br><span class="line">                <span class="hljs-keyword">if</span> (v == r) <span class="hljs-keyword">continue</span>;</span><br><span class="line">                <span class="hljs-keyword">if</span> (!e[j].w) &#123;</span><br><span class="line">                    a[++cnt].x = i;</span><br><span class="line">                    a[cnt].y = v;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (a[cnt].x &gt; a[cnt].y) <span class="hljs-built_in">std</span>::swap(a[cnt].x, a[cnt].y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tot = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="hljs-comment">// printf("%d ", in[i]);</span></span><br><span class="line">    <span class="hljs-comment">// &#125;</span></span><br><span class="line">    <span class="hljs-comment">// puts("");</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (in[a[i].x] != in[a[i].y]) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[i].x &gt; a[i].y) <span class="hljs-built_in">std</span>::swap(a[i].x, a[i].y);</span><br><span class="line">            tot++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">std</span>::sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + cnt, cmp);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, tot);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (in[a[i].x] != in[a[i].y]) &#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>, a[i].x, a[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3731&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="强连通分量" scheme="http://yoursite.com/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
      <category term="二分图" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="http://yoursite.com/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>-网络流-费用流- [洛谷 P3356][网络流24题]火星探险问题</title>
    <link href="http://yoursite.com/2019/05/09/79/"/>
    <id>http://yoursite.com/2019/05/09/79/</id>
    <published>2019-05-09T09:46:05.000Z</published>
    <updated>2019-05-09T09:53:57.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P3356" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题其实和<a href="https://www.luogu.org/problemnew/show/P2045" target="_blank" rel="noopener">这道题</a>比较类似，只是多了有些方格不能走的的条件，所以我们就直接不建那些方格的边，其他模型和那道题一样，建完之后再跑费用流就行了。</p><p><del>网络流24题最毒瘤之处莫过于输出方案</del></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1000010</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 2000000000</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nx, w, c;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> head[MAXN], b[MAXN], ecnt = <span class="hljs-number">1</span>, nc, n, m, x, y, z;</span><br><span class="line"><span class="hljs-keyword">int</span> pre[MAXN], maxf, minc, dis[MAXN], la[MAXN], flow[MAXN], r, k, tot;</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="hljs-function">Tp <span class="hljs-title">min</span><span class="hljs-params">(Tp a, Tp b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], w, c&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;f, head[t], <span class="hljs-number">0</span>, -c&#125;;</span><br><span class="line">    head[t] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(flow, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(flow));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">    pre[t] = <span class="hljs-number">-1</span>;</span><br><span class="line">    dis[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    vis[s] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[v] = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[v]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> f = e[i].w;</span><br><span class="line">            <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (f &gt; <span class="hljs-number">0</span> &amp;&amp; dis[to] &gt; dis[v] + e[i].c) &#123;</span><br><span class="line">                dis[to] = dis[v] + e[i].c;</span><br><span class="line">                pre[to] = v;</span><br><span class="line">                la[to] = i;</span><br><span class="line">                flow[to] = min(flow[v], f);</span><br><span class="line">                <span class="hljs-keyword">if</span> (!vis[to]) &#123;</span><br><span class="line">                    vis[to] = <span class="hljs-number">1</span>;</span><br><span class="line">                    q.push(to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> pre[t] != <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mcmf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span> (spfa(s, t)) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = t;</span><br><span class="line">        maxf += flow[t];</span><br><span class="line">        minc += flow[t] * dis[t];</span><br><span class="line">        <span class="hljs-keyword">while</span> (v != s) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> k = la[v];</span><br><span class="line">            e[k].w -= flow[t];</span><br><span class="line">            e[k ^ <span class="hljs-number">1</span>].w += flow[t];</span><br><span class="line">            v = pre[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (i - <span class="hljs-number">1</span>) * m + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> car, <span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (u == g(n, m) + n * m) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="hljs-keyword">if</span> (e[i ^ <span class="hljs-number">1</span>].w &amp;&amp; u &lt; to + n * m) &#123;</span><br><span class="line">            e[i ^ <span class="hljs-number">1</span>].w--;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>, car, (n * m - (u - to)) == <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">return</span> dfs(car, to + n * m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;nc, &amp;m, &amp;n);</span><br><span class="line">    r = n * m * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;</span><br><span class="line">    k = r + <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            add(g(i, j), g(i, j) + n * m, INF, <span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (x == <span class="hljs-number">2</span>) &#123;</span><br><span class="line">                add(g(i, j), g(i, j) + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>) add(g(i - <span class="hljs-number">1</span>, j) + n * m, g(i, j), INF, <span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>) add(g(i, j - <span class="hljs-number">1</span>) + n * m, g(i, j), INF, <span class="hljs-number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    add(r, g(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), nc, <span class="hljs-number">0</span>);</span><br><span class="line">    add(g(n, m) + n * m, k, nc, <span class="hljs-number">0</span>);</span><br><span class="line">    mcmf(r, k);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nc; i++) &#123;</span><br><span class="line">        dfs(i, g(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) + n * m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3356&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="网络流24题" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/"/>
    
      <category term="费用流" scheme="http://yoursite.com/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>-网络流-费用流- [洛谷 P3965][TJOI2013]循环格</title>
    <link href="http://yoursite.com/2019/04/29/78/"/>
    <id>http://yoursite.com/2019/04/29/78/</id>
    <published>2019-04-29T08:34:23.000Z</published>
    <updated>2019-04-29T08:46:53.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P3965" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题我们可以先将其拆点，把每个点拆成 $x$ 和 $x’$，然后将源点连向每个 $x$ ，将每个 $x’$ 连向汇点，最后根据题目中的所给的方向连边，设一个点 $x$ 指向点 $y$，那么就把 $x$ 和 $y’$ 连一条流量为 $1$，费用为 $0$ 的边，在从这个点向其它 $3$ 个方向连一条流量为 $1$ 费用为 $1$ 的边，再跑最小费用最大流就可以了。</p><p><del>PS：<code>min</code> 和 <code>max</code> 函数写错进然还能过样例</del></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1001000</span></span><br><span class="line"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="hljs-function">Tp <span class="hljs-title">min</span><span class="hljs-params">(Tp a, Tp b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nx, w, c;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> head[MAXN], ecnt = <span class="hljs-number">1</span>, n, m, x, y, dis[MAXN], flow[MAXN], pre[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> la[MAXN], maxf, minc, z, c, r, k, g[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>], cnt;</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="hljs-keyword">char</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], w, c&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;f, head[t], <span class="hljs-number">0</span>, -c&#125;;</span><br><span class="line">    head[t] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(flow, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(flow));</span><br><span class="line">    pre[t] = <span class="hljs-number">-1</span>;</span><br><span class="line">    dis[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    vis[s] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (dis[to] &gt; dis[u] + e[i].c &amp;&amp; e[i].w) &#123;</span><br><span class="line">                dis[to] = dis[u] + e[i].c;</span><br><span class="line">                pre[to] = u;</span><br><span class="line">                la[to] = i;</span><br><span class="line">                flow[to] = min(flow[u], e[i].w);</span><br><span class="line">                <span class="hljs-keyword">if</span> (!vis[to]) &#123;</span><br><span class="line">                    vis[to] = <span class="hljs-number">1</span>;</span><br><span class="line">                    q.push(to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> pre[t] != <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mcmf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span> (spfa(s, t)) &#123;</span><br><span class="line">        maxf += flow[t];</span><br><span class="line">        minc += flow[t] * dis[t];</span><br><span class="line">        <span class="hljs-keyword">int</span> v = t;</span><br><span class="line">        <span class="hljs-keyword">while</span> (v != s) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> k = la[v];</span><br><span class="line">            e[k].w -= flow[t];</span><br><span class="line">            e[k ^ <span class="hljs-number">1</span>].w += flow[t];</span><br><span class="line">            v = pre[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    r = <span class="hljs-number">2</span> * n * m + <span class="hljs-number">1</span>;</span><br><span class="line">    k = r + <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">            g[i][j] = ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * m; i++) &#123;</span><br><span class="line">        add(r, i, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        add(i + n * m, k, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        g[<span class="hljs-number">0</span>][i] = g[n][i];</span><br><span class="line">        g[n + <span class="hljs-number">1</span>][i] = g[<span class="hljs-number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        g[i][<span class="hljs-number">0</span>] = g[i][m];</span><br><span class="line">        g[i][m + <span class="hljs-number">1</span>] = g[i][<span class="hljs-number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">'U'</span>) add(g[i][j], g[i - <span class="hljs-number">1</span>][j] + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">else</span> add(g[i][j], g[i - <span class="hljs-number">1</span>][j] + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">'D'</span>) add(g[i][j], g[i + <span class="hljs-number">1</span>][j] + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">else</span> add(g[i][j], g[i + <span class="hljs-number">1</span>][j] + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">'L'</span>) add(g[i][j], g[i][j - <span class="hljs-number">1</span>] + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">else</span> add(g[i][j], g[i][j - <span class="hljs-number">1</span>] + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">'R'</span>) add(g[i][j], g[i][j + <span class="hljs-number">1</span>] + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">else</span> add(g[i][j], g[i][j + <span class="hljs-number">1</span>] + n * m, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// puts("OK");</span></span><br><span class="line">    mcmf(r, k);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, minc);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3965&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="费用流" scheme="http://yoursite.com/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>-学习笔记-树套树- 树套树学习笔记</title>
    <link href="http://yoursite.com/2019/04/24/77/"/>
    <id>http://yoursite.com/2019/04/24/77/</id>
    <published>2019-04-24T00:35:32.000Z</published>
    <updated>2019-04-24T02:29:08.852Z</updated>
    
    <content type="html"><![CDATA[<p><del>我学了很酷很炫的算法，我失败了</del></p><a id="more"></a><p>其实各类树套树都差不多，在这里主要说线段树套平衡树</p><p>线段树套一个平衡树，就是在线段树里的每个节点都开一个平衡树来存储<strong>这个节点所表示区间</strong>里的所有的数（如图所示）。</p><p><img src="\img\sts.png" alt=""></p><p>因此，建树这样建：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">insert(rt[p], a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (l != r) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">build(l, m, ls(p));</span><br><span class="line">build(m + <span class="hljs-number">1</span>, r, rs(p));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建树的时间复杂度为 $O(n \log ^ 2 n)$。</p><p>关于建树的时间复杂度让我们来分析一下：</p><p>首先，对于线段树的每一层，都有 $n$ 个数被插入，而平衡树的插入操作时间复杂度是 $O(\log n)$ 的，因此，线段树每层的时间复杂度为 $O(n \log n)$ 的，并且，线段树至多有 $\log n$ 层，所以总的建树时间复杂度为 $O(n \log ^ 2 n)$。</p><p>下面讲一下动态查询区间第K大。</p><p>这是最最常见的用法，其实现原理就是在这个区间里进行二分。</p><p>虽然动态查询第K大用树状数组+整体二分也能做，但是树套树可以<strong>强制在线</strong></p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RgKth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> ql = <span class="hljs-number">0</span>, qr = <span class="hljs-number">100000000</span>;</span><br><span class="line"><span class="hljs-keyword">while</span> (ql &lt; qr) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> m = (ql + qr + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (RgRk(x, y, <span class="hljs-number">1</span>, n, m, <span class="hljs-number">1</span>) &lt; k) &#123; <span class="hljs-comment">// 查询这个数在这个区间内的排名</span></span><br><span class="line">ql = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> qr = m - <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> qr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此操作时间复杂度为 $O(n \log^3 n)$。</p><p>动态查询第K大还有一种常见的写法是树状数组套主席树，这种方法虽然时间复杂度小，但是空间复杂度较大，在这里不进行讲解<del>其实就是自己不会</del></p><p>动态查询第K大例题：</p><p><a href="https://www.luogu.org/problemnew/show/P2617" target="_blank" rel="noopener">Dynamic Rankings</a></p><p><a href="https://www.luogu.org/problemnew/show/P3332" target="_blank" rel="noopener">[ZJOI2013]K大数查询</a></p><p>线段树套平衡树板子题：<a href="https://www.luogu.org/problemnew/show/P3380" target="_blank" rel="noopener">【模板】二逼平衡树（树套树）</a></p><p>Code:</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 线段树套Treap</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 2000020</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls(x) ((x) &lt;&lt; 1)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs(x) ((x) &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &gt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Treap</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> l, r;</span><br><span class="line">    <span class="hljs-keyword">int</span> val, dat;</span><br><span class="line">    <span class="hljs-keyword">int</span> cnt, size;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> tot, n, m;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">New</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    a[++tot].val = val;</span><br><span class="line">    a[tot].dat = rand();</span><br><span class="line">    a[tot].cnt = a[tot].size = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    a[p].size = a[a[p].l].size + a[a[p].r].size + a[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">FindR</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// printf("%d %d %d\n", p, a[p].val, val);</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (val == a[p].val) <span class="hljs-keyword">return</span> a[a[p].l].size;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (val &lt; a[p].val) <span class="hljs-keyword">return</span> FindR(a[p].l, val);</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> FindR(a[p].r, val) + a[a[p].l].size + a[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zig</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> q = a[p].l;</span><br><span class="line">    a[p].l = a[q].r, a[q].r = p, p = q;</span><br><span class="line">    update(a[p].r), update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zag</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> q = a[p].r;</span><br><span class="line">    a[p].r = a[q].l, a[q].l = p, p = q;</span><br><span class="line">    update(a[p].l), update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;p, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        p = New(val);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (val == a[p].val) &#123;</span><br><span class="line">        a[p].cnt++, update(p);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (val &lt; a[p].val) &#123;</span><br><span class="line">        insert(a[p].l, val);</span><br><span class="line">        <span class="hljs-keyword">if</span> (a[p].dat &lt; a[a[p].l].dat) zig(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        insert(a[p].r, val);</span><br><span class="line">        <span class="hljs-keyword">if</span> (a[p].dat &lt; a[a[p].r].dat) zag(p);</span><br><span class="line">    &#125;</span><br><span class="line">    update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!p) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a[p].val &gt;= val) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> Pre(a[p].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> max(a[p].val, Pre(a[p].r, val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Next</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!p) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a[p].val &lt;= val) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> Next(a[p].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> min(a[p].val, Next(a[p].l, val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;p, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (val == a[p].val) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (a[p].cnt &gt; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            a[p].cnt--, update(p);</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (a[p].l || a[p].r) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[p].r == <span class="hljs-number">0</span> || a[a[p].l].dat &gt; a[a[p].r].dat)</span><br><span class="line">                zig(p), Remove(a[p].r, val);</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">                zag(p), Remove(a[p].l, val);</span><br><span class="line">            update(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> p = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    val &lt; a[p].val ? Remove(a[p].l, val) : Remove(a[p].r, val);</span><br><span class="line">    update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segtree</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> a[MAXN], b[MAXN], rt[MAXN];</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">            insert(rt[p], a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l != r) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">            build(l, m, ls(p));</span><br><span class="line">            build(m + <span class="hljs-number">1</span>, r, rs(p));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        Remove(rt[p], a[x]);</span><br><span class="line">        insert(rt[p], k);</span><br><span class="line">        <span class="hljs-keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (x &lt;= m) change(x, l, m, k, ls(p));</span><br><span class="line">        <span class="hljs-keyword">else</span> change(x, m + <span class="hljs-number">1</span>, r, k, rs(p));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RgRk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// printf("%d\n", p);</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; y &gt;= r) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> FindR(rt[p], k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">return</span> RgRk(x, y, l, m, k, ls(p)) + RgRk(x, y, m + <span class="hljs-number">1</span>, r, k, rs(p));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RgKth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> ql = <span class="hljs-number">0</span>, qr = <span class="hljs-number">100000000</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span> (ql &lt; qr) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> m = (ql + qr + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (RgRk(x, y, <span class="hljs-number">1</span>, n, m, <span class="hljs-number">1</span>) &lt; k) &#123;</span><br><span class="line">                ql = m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> qr = m - <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> qr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RgPre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> -INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; y &gt;= r) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> Pre(rt[p], k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">return</span> max(RgPre(x, y, l, m, k, ls(p)), RgPre(x, y, m + <span class="hljs-number">1</span>, r, k, rs(p)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RgNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; y &gt;= r) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> Next(rt[p], k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">return</span> min(RgNext(x, y, l, m, k, ls(p)), RgNext(x, y, m + <span class="hljs-number">1</span>, r, k, rs(p)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr;</span><br><span class="line"><span class="hljs-keyword">int</span> op, l, r, k;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="hljs-literal">NULL</span>));</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;tr.a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    tr.build(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;op);</span><br><span class="line">        <span class="hljs-keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, tr.RgRk(l, r, <span class="hljs-number">1</span>, n, k, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, tr.RgKth(l, r, <span class="hljs-number">1</span>, n, k, <span class="hljs-number">1</span>));</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">                tr.change(l, <span class="hljs-number">1</span>, n, r, <span class="hljs-number">1</span>);</span><br><span class="line">                tr.a[l] = r;</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, tr.RgPre(l, r, <span class="hljs-number">1</span>, n, k, <span class="hljs-number">1</span>));</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, tr.RgNext(l, r, <span class="hljs-number">1</span>, n, k, <span class="hljs-number">1</span>));</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我又学了新的树套树，到时候再更。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;我学了很酷很炫的算法，我失败了&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="树套树" scheme="http://yoursite.com/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>-网络流-费用流- [洛谷 P4329][COCI2006-2007#1] Bond</title>
    <link href="http://yoursite.com/2019/04/23/76/"/>
    <id>http://yoursite.com/2019/04/23/76/</id>
    <published>2019-04-23T13:47:47.000Z</published>
    <updated>2019-04-24T00:30:11.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P4329" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>首先，能够很容易看出来，这是个二分图最大权匹配的模型</p><p>但是唯一不同的是，求的是乘积而不是和</p><p>所以我们可以运用 $\log$ 的性质：$\log ab = \log a + \log b$ 来把这道题转换为和的形式</p><p>如果担心精度会炸，那就开 $\texttt{long double}$ </p><p>最后跑一遍费用流就行了</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nx, fl;</span><br><span class="line">    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> w;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, s, t, head[MAXN], ecnt = <span class="hljs-number">1</span>, flow[MAXN], maxf, la[MAXN], pre[MAXN], x, y, z, f;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> dis[MAXN], minc, k;</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="hljs-function">Tp <span class="hljs-title">min</span><span class="hljs-params">(Tp a, Tp b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> fl, <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> w)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], fl, w&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;f, head[t], <span class="hljs-number">0</span>, -w&#125;;</span><br><span class="line">    head[t] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">        dis[i] = <span class="hljs-number">9999999.9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(flow, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(flow));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">    q.push(s);</span><br><span class="line">    dis[s] = <span class="hljs-number">0.0</span>;</span><br><span class="line">    vis[s] = <span class="hljs-number">1</span>;</span><br><span class="line">    pre[t] = <span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[v] = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[v]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> f = e[i].fl;</span><br><span class="line">            <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (f &gt; <span class="hljs-number">0</span> &amp;&amp; dis[to] &gt; dis[v] + e[i].w) &#123;</span><br><span class="line">                dis[to] = dis[v] + e[i].w;</span><br><span class="line">                pre[to] = v;</span><br><span class="line">                la[to] = i;</span><br><span class="line">                flow[to] = min(flow[v], f);</span><br><span class="line">                <span class="hljs-keyword">if</span> (!vis[to]) &#123;</span><br><span class="line">                    vis[to] = <span class="hljs-number">1</span>;</span><br><span class="line">                    q.push(to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> pre[t] != <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mcmf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span> (spfa(s, t)) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = t;</span><br><span class="line">        minc += (<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)flow[t] * dis[t];</span><br><span class="line">        <span class="hljs-keyword">while</span> (v != s) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> k = la[v];</span><br><span class="line">            e[k].fl -= flow[t];</span><br><span class="line">            e[k ^ <span class="hljs-number">1</span>].fl += flow[t];</span><br><span class="line">            v = pre[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line">    s = <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>;</span><br><span class="line">    t = s + <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        add(s, i, <span class="hljs-number">1</span>, <span class="hljs-number">0.0</span>);</span><br><span class="line">        add(i + n, t, <span class="hljs-number">1</span>, <span class="hljs-number">0.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);</span><br><span class="line">            k = (<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)x / <span class="hljs-number">100.0</span>;</span><br><span class="line">            k = log2(k);</span><br><span class="line">            add(i, j + n, <span class="hljs-number">1</span>, -k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mcmf(s, t);</span><br><span class="line">    <span class="hljs-keyword">if</span> (minc == <span class="hljs-number">0.00</span>) &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0.00000000\n"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.6f\n"</span>, <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, -minc) * <span class="hljs-number">100.0</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4329&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="费用流" scheme="http://yoursite.com/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>-数论-莫比乌斯反演-容斥- [SP26017]GCDMAT - GCD OF MATRIX</title>
    <link href="http://yoursite.com/2019/04/18/75/"/>
    <id>http://yoursite.com/2019/04/18/75/</id>
    <published>2019-04-18T00:20:07.000Z</published>
    <updated>2019-04-18T02:42:18.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/SP26017" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>其实如果这道题没有容斥的操作就是这样：</p><p>$$\sum_{i = 1}^n \sum_{j = 1}^m \gcd(i, j)$$</p><p>然后我们可以推一下：</p><p>$$\sum_{i = 1}^n \sum_{j = 1}^m \gcd(i, j)​$$</p><p>$$\sum_{d = 1}^n \sum_{i = 1}^n \sum_{j = 1}^m [\gcd(i, j) == d] $$</p><p>$$\sum_{d = 1}^n \sum_{i = 1}^{\lfloor \frac{n}{d} \rfloor} \sum_{j = 1}^{\lfloor \frac{m}{d} \rfloor} [\gcd(i ,j) == 1] ​$$</p><p>$$\sum_{d = 1}^n \sum_{i = 1}^{\lfloor \frac{n}{d} \rfloor} \sum_{j = 1}^{\lfloor \frac{m}{d} \rfloor} \sum_{d | \gcd(i, j)} \mu(d)​$$</p><p>$$\sum_{d = 1}^n \sum_{a = 1}^n \mu(a) {\lfloor \frac{n}{ad} \rfloor}{\lfloor \frac{m}{ad} \rfloor}​$$</p><p>设 $T=ad​$</p><p>$$\sum_{T = 1}^n  {\lfloor \frac{n}{T} \rfloor}{\lfloor \frac{m}{T} \rfloor} \sum_{d | T} d \mu({\lfloor \frac{T}{d} \rfloor})​$$</p><p>因为 $\sum_{d | T} d \mu({\lfloor \frac{T}{d} \rfloor})​$ 这部分是狄利克雷卷积的形式，而 $id * \mu = \varphi​$</p><p>所以线性筛一遍欧拉函数再用整除分块就行了。</p><p>最后再用容斥<del>瞎搞搞</del>就可以了。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 500010</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="hljs-keyword">int</span> p[MAXN + <span class="hljs-number">10</span>], tot, phi[MAXN + <span class="hljs-number">10</span>], T, g[MAXN + <span class="hljs-number">10</span>], answ;</span><br><span class="line"><span class="hljs-keyword">bool</span> chk[MAXN + <span class="hljs-number">10</span>];</span><br><span class="line"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="hljs-function">Tp <span class="hljs-title">min</span><span class="hljs-params">(Tp a, Tp b)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="hljs-function">Tp <span class="hljs-title">max</span><span class="hljs-params">(Tp a, Tp b)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (a &gt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sieve</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">chk[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= MAXN; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!chk[i]) &#123;</span><br><span class="line">p[++tot] = i;</span><br><span class="line">phi[i] = i - <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= MAXN; j++) &#123;</span><br><span class="line">chk[i * p[j]] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (!(i % p[j])) &#123;</span><br><span class="line">phi[i * p[j]] = phi[i] * p[j];</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">phi[i * p[j]] = phi[i] * phi[p[j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= MAXN; i++) &#123;</span><br><span class="line">g[i] = (g[i - <span class="hljs-number">1</span>] + phi[i]) % MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n = min(x, y);</span><br><span class="line"><span class="hljs-keyword">int</span> m = max(x, y);</span><br><span class="line">ll ans = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">r = min(n / (n / l), m / (m / l));</span><br><span class="line">ans += (((n / l) % MOD * (m / l) % MOD) % MOD) * ((g[r] - g[l - <span class="hljs-number">1</span>] + MOD) % MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> (ans % MOD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> a, b, c, d, n, m;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">sieve();</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;T);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="hljs-keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld%lld%lld%lld"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">answ = (sum(c, d) + sum(a - <span class="hljs-number">1</span>, b - <span class="hljs-number">1</span>) - sum(c, b - <span class="hljs-number">1</span>) - sum(d, a - <span class="hljs-number">1</span>) + <span class="hljs-number">2</span> * MOD) % MOD;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, answ % MOD);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/SP26017&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="SPOJ" scheme="http://yoursite.com/tags/SPOJ/"/>
    
  </entry>
  
  <entry>
    <title>-整体二分-树状数组- [洛谷 P2617]Dynamic Rankings</title>
    <link href="http://yoursite.com/2019/04/15/74/"/>
    <id>http://yoursite.com/2019/04/15/74/</id>
    <published>2019-04-15T08:59:17.000Z</published>
    <updated>2019-04-15T09:09:21.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P2617" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这题我们用整体二分。</p><a id="more"></a><p>为什么不用主席树套树状数组呢？<del>最主要的原因就是我不会。</del>因为主席树再套一个树状数组空间开销有些大，故不用主席树套树状数组<del>虽然我写的整体二分空间占用也小不到那里去</del></p><p>我们只需要把修改操作拆成删除、赋值两个操作就可以了，剩下的就是普通的整体二分查第K大了。</p><p>而且别忘了用树状数组维护修改操作。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rec</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> op, x, y, z;</span><br><span class="line">&#125; q[MAXN &lt;&lt; <span class="hljs-number">2</span>], lq[MAXN &lt;&lt; <span class="hljs-number">2</span>], rq[MAXN &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, t, c[MAXN], ans[MAXN], id, a[MAXN];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (; x; x -= x &amp; -x) y += c[x];</span><br><span class="line">    <span class="hljs-keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (; x &lt;= n; x += x &amp; -x) c[x] += y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lval, <span class="hljs-keyword">int</span> rval, <span class="hljs-keyword">int</span> st, <span class="hljs-keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (st &gt; ed) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (lval == rval) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = st; i &lt;= ed; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (q[i].op &gt; <span class="hljs-number">0</span>) ans[q[i].op] = lval;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (lval + rval) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> lt = <span class="hljs-number">0</span>, rt = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = st; i &lt;= ed; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (q[i].op == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (q[i].y &lt;= mid) change(q[i].x, <span class="hljs-number">1</span>), lq[++lt] = q[i];</span><br><span class="line">            <span class="hljs-keyword">else</span> rq[++rt] = q[i];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="hljs-keyword">if</span> (q[i].op == <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (q[i].y &lt;= mid) change(q[i].x, <span class="hljs-number">-1</span>), lq[++lt] = q[i];</span><br><span class="line">            <span class="hljs-keyword">else</span> rq[++rt] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (q[i].op &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> cnt = ask(q[i].y) - ask(q[i].x - <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (cnt &gt;= q[i].z) lq[++lt] = q[i];</span><br><span class="line">            <span class="hljs-keyword">else</span> q[i].z -= cnt, rq[++rt] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = ed; i &gt;= st; i--) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (q[i].op == <span class="hljs-number">0</span> &amp;&amp; q[i].y &lt;= mid) change(q[i].x, <span class="hljs-number">-1</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (q[i].op == <span class="hljs-number">-1</span> &amp;&amp; q[i].y &lt;= mid) change(q[i].x, <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= lt; i++) q[st + i - <span class="hljs-number">1</span>] = lq[i];</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= rt; i++) q[st + lt + i - <span class="hljs-number">1</span>] = rq[i];</span><br><span class="line">    solve(lval, mid, st, st + lt - <span class="hljs-number">1</span>);</span><br><span class="line">    solve(mid + <span class="hljs-number">1</span>, rval, st + lt, ed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> l, r, k;</span><br><span class="line"><span class="hljs-keyword">char</span> op[<span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> val;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;val);</span><br><span class="line">        a[i] = val;</span><br><span class="line">        q[++t].op = <span class="hljs-number">0</span>, q[t].x = i, q[t].y = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s%d%d"</span>, op, &amp;l, &amp;r);</span><br><span class="line">        <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">'Q'</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;k);</span><br><span class="line">            q[++t].op = ++id, q[t].x = l, q[t].y = r, q[t].z = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            q[++t].op = <span class="hljs-number">-1</span>, q[t].x = l, q[t].y = a[l];</span><br><span class="line">            q[++t].op = <span class="hljs-number">0</span>, q[t].x = l, q[t].y = r;</span><br><span class="line">            a[l] = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(-INF, INF, <span class="hljs-number">1</span>, t);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= id; i++) &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2617&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;这题我们用整体二分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="整体二分" scheme="http://yoursite.com/tags/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>-DP-贪心- [洛谷 5275]思路题(ak)</title>
    <link href="http://yoursite.com/2019/04/02/73/"/>
    <id>http://yoursite.com/2019/04/02/73/</id>
    <published>2019-04-02T09:47:08.000Z</published>
    <updated>2019-04-02T09:54:41.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P5275" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题的做法就是先按照a的大小排序，然后将此题转换为LIS问题，得用 $O(n \log n)​$ 的算法</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">num</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> a, b, id;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> n, d[MAXN], g[MAXN], top, k[MAXN], len;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(num a, num b)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a.b &gt; b.b || ((a.b == b.b) &amp;&amp; a.a &lt; b.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i].a);</span><br><span class="line">a[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i].b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">std</span>::sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n, cmp);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (a[i].a &gt;= d[top]) d[++top] = a[i].a, g[a[i].id] = top;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> j = <span class="hljs-built_in">std</span>::upper_bound(d + <span class="hljs-number">1</span>, d + <span class="hljs-number">1</span> + top, a[i].a) - d;</span><br><span class="line">d[j] = a[i].a;</span><br><span class="line">g[a[i].id] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, top);</span><br><span class="line">len = top;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (g[a[i].id] == len)&#123;</span><br><span class="line">k[len--] = a[i].id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= top; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, k[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P5275&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>-数论-杜教筛- [BZOJ 4916]神犇和蒟蒻</title>
    <link href="http://yoursite.com/2019/03/26/72/"/>
    <id>http://yoursite.com/2019/03/26/72/</id>
    <published>2019-03-26T12:17:10.000Z</published>
    <updated>2019-03-26T13:13:26.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=4916" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一个根本不用筛，答案永远都是1</p><p>现在来解决第二个：</p><p>我们先把 $\varphi(x ^ 2)$ 化简一下</p><p>我们知道，欧拉函数是这样计算的：</p><p>$$\varphi(x) = x \prod \frac{p_i - 1}{p_i}$$</p><p>所以设 $x = p_1 ^ {a_1} p_2 ^ {a_2} p_3 ^ {a_3}…p_i ^ {a_i}$</p><p>所以有</p><p>$$x ^ 2 = p_1 ^ {2a_1} p_2 ^ {2a_2} p_3 ^ {2a_3}…p_i ^ {2a_i}$$</p><p>所以</p><p>$$\varphi(x ^ 2) = x \cdot x \prod_{i=1}^n \frac{p_i - 1}{p_i}$$</p><p>$$\varphi(x ^ 2) = x \cdot \varphi(x)$$</p><p>于是第二个就变成了 </p><p>$$\sum_{i = 1}^n i \cdot \varphi(i)$$</p><p>然后就可以用杜教筛了。</p><p>设 $f(i) = i \cdot \varphi(i)$，$g(n) = \sum_{i = 1}^n f(i)$</p><p>因为 $id = f * id$</p><p>所以 $$g(n) = \sum_{i = 1} ^ n i ^ 2 - \sum_{i = 1} ^ n i \cdot \varphi(\lfloor \frac{n}{i} \rfloor)$$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tr1/unordered_map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 5001000</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line">tr1::<span class="hljs-built_in">unordered_map</span>&lt;ll, ll&gt; ans2;</span><br><span class="line"><span class="hljs-keyword">int</span> p[MAXN], phi[MAXN], tot, t, n;</span><br><span class="line">ll pre2[MAXN], kk, tt;</span><br><span class="line"><span class="hljs-keyword">bool</span> chk[MAXN];</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = (res * a) % m;</span><br><span class="line">        b &gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line">        a = (a * a) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> res % m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getshai</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    chk[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= MAXN; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!chk[i]) &#123;</span><br><span class="line">            p[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= MAXN; j++) &#123;</span><br><span class="line">            chk[i * p[j]] = <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (i % p[j]) &#123;</span><br><span class="line">                phi[i * p[j]] = phi[i] * phi[p[j]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                phi[i * p[j]] = p[j] * phi[i];</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= MAXN; i++) &#123;</span><br><span class="line">        pre2[i] = pre2[i - <span class="hljs-number">1</span>] + (ll)(phi[i] * i) % MOD;</span><br><span class="line">        pre2[i] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">sum</span><span class="hljs-params">(ll a)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> a * (a + <span class="hljs-number">1</span>) % MOD * (<span class="hljs-number">2</span> * a + <span class="hljs-number">1</span>) % MOD * kk % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">getphi</span><span class="hljs-params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (x &lt;= MAXN) <span class="hljs-keyword">return</span> pre2[x];</span><br><span class="line">    <span class="hljs-keyword">if</span> (ans2[x]) <span class="hljs-keyword">return</span> ans2[x];</span><br><span class="line">    ll ans = sum(x);</span><br><span class="line">    <span class="hljs-keyword">for</span> (re ll l = <span class="hljs-number">2</span>, r; l &lt;= x; l = r + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">        r = x / (x / l);</span><br><span class="line">        ans -= <span class="hljs-number">1L</span>L * (r - l + <span class="hljs-number">1L</span>L) * (l + r) % MOD * tt % MOD * getphi(x / l);</span><br><span class="line">        ans += MOD;</span><br><span class="line">        ans %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ans2[x] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    getshai();</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line">    kk = qpow(<span class="hljs-number">6</span>, MOD - <span class="hljs-number">2</span>, MOD);</span><br><span class="line">    tt = qpow(<span class="hljs-number">2</span>, MOD - <span class="hljs-number">2</span>, MOD);</span><br><span class="line">    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"1"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, getphi((ll)n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=4916&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="http://yoursite.com/tags/BZOJ/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="杜教筛" scheme="http://yoursite.com/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>-数论-卷积- 关于积性函数的汇总以及常用的卷积</title>
    <link href="http://yoursite.com/2019/03/18/71/"/>
    <id>http://yoursite.com/2019/03/18/71/</id>
    <published>2019-03-18T05:48:02.000Z</published>
    <updated>2019-05-09T09:44:06.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="积性函数的定义"><a href="#积性函数的定义" class="headerlink" title="积性函数的定义"></a>积性函数的定义</h2><p>对于一个函数 $f(x)​$，有互质的两数 $a,b​$，如果函数具有 $f(a b) = f(a) f(b)​$的性质，那么此类型的函数被称为<strong>积性函数</strong>。</p><p><strong>完全积性函数</strong>：若一个积性函数 $f(x)$，具有 $f(x ^ k) = f^k(x)$，那么此函数成为完全积性函数。</p><a id="more"></a><h2 id="常见的积性函数"><a href="#常见的积性函数" class="headerlink" title="常见的积性函数"></a>常见的积性函数</h2><p>1.$\varphi (x)$：欧拉函数，表示小于 $x$ 且与 $x$ 互质的数的个数。</p><p>2.$\mu (x)$：莫比乌斯函数，关于非平方数的质因子数目的函数。</p><p>莫比乌斯函数这样计算：</p><p>$$\mu(x) =  \begin{cases} 1 \ \ \ \ \ \ \ \ \ \  (x = 1) \\ (-1) ^ k \ \  (x = p_1p_2p_3…p_k) \\ 0 \ \ \ \ \ \ \ \ \ \  \texttt{其他情况}\end{cases}$$</p><p>3.$d(x)​$：约数个数函数，表示 $x​$ 的约数个数。</p><p>4.$\sigma(x)​$：约数和函数，表示 $x​$ 的各约数之和。</p><p>5.$I(x)​$：不变函数，此函数的值恒为1，此函数是完全积性函数</p><p>6.$\epsilon(x)$：元函数，此函数的计算方式为：若 $x = 1$，$\epsilon(x) = 1$，若 $x &gt; 1$，$\epsilon(x) = 0$，此函数为完全积性函数。</p><p>7.$id(x)$：单位函数，计算方式为 $id(x) = x$ ，此函数为完全积性函数。</p><p>8.$idk(x)$：幂函数，计算方式为 $idk(x) = x ^ k$，此函数为完全积性函数。</p><p>9.$\lambda(x)$：刘维尔函数，计算方式：设 $\Omega(x)$ 为 $x$ 的质因子的数目，则 $\lambda(x) = (-1) ^ {\Omega(x)}$</p><h2 id="一些积性函数常用的性质"><a href="#一些积性函数常用的性质" class="headerlink" title="一些积性函数常用的性质"></a>一些积性函数常用的性质</h2><p>1.</p><p>$$\sum_{d | n} \mu(d) = \begin{cases} 1 (n = 1) \\ 0 (n &gt; 1) \end{cases}​$$</p><p>2.</p><p>$$\sum_{d^2 | n} \mu(\frac{n}{d^2}) = \lambda(n)​$$</p><p>3.</p><p>$$\sum_{d | n}\frac{\mu(d)}{d} = \frac{\varphi(n)}{n}$$</p><p>4.</p><p>$$\sum_{d | n} \varphi(n) = n$$</p><p>5.</p><p>对于任意积性函数 $f(x)$，都有 $f*\epsilon=f$</p><h2 id="一些常用的卷积"><a href="#一些常用的卷积" class="headerlink" title="一些常用的卷积"></a>一些常用的卷积</h2><p>1.$I * \varphi = id$</p><p>2.$\mu * I = \epsilon$</p><p>3.$id * \mu = \varphi$</p><p>4.$\mu * d = I$</p><p>5.$id * \mu = \varphi * \epsilon$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;积性函数的定义&quot;&gt;&lt;a href=&quot;#积性函数的定义&quot; class=&quot;headerlink&quot; title=&quot;积性函数的定义&quot;&gt;&lt;/a&gt;积性函数的定义&lt;/h2&gt;&lt;p&gt;对于一个函数 $f(x)​$，有互质的两数 $a,b​$，如果函数具有 $f(a b) = f(a) f(b)​$的性质，那么此类型的函数被称为&lt;strong&gt;积性函数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;完全积性函数&lt;/strong&gt;：若一个积性函数 $f(x)$，具有 $f(x ^ k) = f^k(x)$，那么此函数成为完全积性函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="卷积" scheme="http://yoursite.com/tags/%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>-树链剖分- 树链剖分详解</title>
    <link href="http://yoursite.com/2019/03/16/70/"/>
    <id>http://yoursite.com/2019/03/16/70/</id>
    <published>2019-03-16T00:02:38.000Z</published>
    <updated>2019-05-19T09:25:49.289Z</updated>
    
    <content type="html"><![CDATA[<p>如果有个题目，要求你在数列上区间求和，支持修改。</p><p>那么这道题就是很简单的线段树板子题，对吧？</p><p>但是，这个世界是残酷的。为了不让题目那么简单，邪恶的出题人会把序列上的转换到树上，使题目难度增加一倍甚至几倍。</p><p>这样一看，完了，线段树可处理不了树上的操作啊<del>，顿时感到人生苦短，失去了活下去的勇气</del>。</p><p>那么，一个神奇的而又强大的东西——树链剖分可以解决上述问题。</p><a id="more"></a><p><strong>前置知识</strong>：DFS序、线段树。</p><p>啥，你不会线段树？序列上的问题都不会处理就想处理树上的问题？<del>你快醒醒！</del></p><p><strong>变量的定义</strong>（当然这都是根据个人喜好来定义变量的名称，但作用都是一样的）：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> dep[MAXN]; <span class="hljs-comment">// 每个节点的深度</span></span><br><span class="line"><span class="hljs-keyword">int</span> si[MAXN]; <span class="hljs-comment">// 每个节点的子树大小</span></span><br><span class="line"><span class="hljs-keyword">int</span> w[MAXN]; <span class="hljs-comment">// 每个节点的权值</span></span><br><span class="line"><span class="hljs-keyword">int</span> fa[MAXN]; <span class="hljs-comment">// 每个节点的父亲</span></span><br><span class="line"><span class="hljs-keyword">int</span> top[MAXN]; <span class="hljs-comment">// 每个节点所属的链的顶端节点</span></span><br><span class="line"><span class="hljs-keyword">int</span> son[MAXN]; <span class="hljs-comment">// 每个节点的重儿子</span></span><br><span class="line"><span class="hljs-keyword">int</span> id[MAXN]; <span class="hljs-comment">// 每个节点的标号</span></span><br></pre></td></tr></table></figure><p><strong>下面进入正题</strong>：</p><p>让我们先来看这幅图：</p><p><img src="/img/slpf1.png" alt=""></p><p>显然这是一棵树。</p><p>那么我们该如何处理这棵树使它能够转换为序列上的问题呢。</p><p>我们可以把这棵树剖分一下，剖分成一些不同的链，分为重链和轻链。</p><p>什么是重链？就是把重儿子连在一起形成的链。</p><p>所以轻链也就是把轻儿子连在一起形成的链。</p><p>那什么又是重儿子呢？就是在一个节点的所有儿子中，子树最大的那个。当然，可能会出现具有相同大小子树的情况，我们只需要任选一个就行了。</p><p>轻儿子就是就是一个节点除重儿子外的所有儿子</p><p>还是这棵树：</p><p><img src="/img/slpf2.png" alt=""></p><p>上图已经用红线标出了所有重链，红色正方形的节点是重儿子，为了方便处理，我们把根节点也算作重儿子。</p><p>现在问题来了，该如何求出重儿子、轻儿子、重链、轻链呢？</p><p>下面放程序：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line">dep[u] = deep; <span class="hljs-comment">//记录深度</span></span><br><span class="line">fa[u] = f; <span class="hljs-comment">//记录父节点</span></span><br><span class="line">si[u] = <span class="hljs-number">1</span>; <span class="hljs-comment">//子树初始化</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line"><span class="hljs-keyword">if</span> (to == f) <span class="hljs-keyword">continue</span>;</span><br><span class="line">dfs1(to, u, deep + <span class="hljs-number">1</span>);</span><br><span class="line">si[u] += si[to]; <span class="hljs-comment">//求出这个节点子树的大小</span></span><br><span class="line"><span class="hljs-keyword">if</span> (si[to] &gt; si[son[u]]) son[u] = to; <span class="hljs-comment">//更新重儿子</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很巧妙？<del>好像不是</del>一个dfs就解决完轻重儿子的问题，下面再来个dfs来解决轻重链的问题：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> topf)</span> </span>&#123;</span><br><span class="line">id[u] = ++cnt; <span class="hljs-comment">//处理DFS序</span></span><br><span class="line">wt[cnt] = w[u];</span><br><span class="line">top[u] = topf;</span><br><span class="line"><span class="hljs-keyword">if</span> (!son[u]) <span class="hljs-keyword">return</span>;</span><br><span class="line">dfs2(son[u], topf); <span class="hljs-comment">// 顺着重儿子找重链</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line"><span class="hljs-keyword">if</span> (fa[u] == to || to == son[u]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">dfs2(to, to); <span class="hljs-comment">// 顺着轻儿子找轻链</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更为巧妙的是，上面这个程序保证每条链内的标号是连续的</p><p><del>至此，树链剖分结束</del></p><p>等一下，已经把这棵树处理完了，该如何用树链剖分解决树上的操作呢。</p><p>处理树上的操作分为三个问题：</p><p><strong><em>1.单点的操作</em></strong></p><p>直接线段树单点修改就行了。</p><p><strong><em>2.子树的操作</em></strong></p><p>让我们回忆一下DFS序的过程：每次都是搜到底再回溯。</p><p>所以我们可以得出一条结论：在子树中，每个节点的标号是连续的。</p><p>然后用线段区间修改就行了</p><p><strong><em>3.路径上的操作</em></strong></p><p><strong>这才是重点所在，树链剖分就是擅长处理这种操作！</strong></p><p>我们既然已经划分出轻重链了，那么我们现在同等对待他们。</p><p>先给出程序：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) swap(x, y);</span><br><span class="line"><span class="hljs-comment">// 操作</span></span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (dep[x] &gt; dep[y]) swap(x, y);</span><br><span class="line"><span class="hljs-comment">// 操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别看这程序短小，但这是树链剖分的精华所在！<del>浓缩的都是精华</del></p><p><em>下面开始解读程序</em></p><p><code>while (top[x] != top[y])</code>这句是什么意思呢？</p><p>如果这两个点不在一条链上，那就不断跳，知道跳到同一条链上为止。</p><p><code>if (dep[top[x]] &lt; dep[top[y]]) swap(x, y);</code>这又是什么意思呢？</p><p>还是这张图：</p><p><img src="/img/slpf2.png" alt=""></p><p>如果我们要处理从节点6到节点5的操作，会发现节点5所在链的顶端正好与节点6所在链的中间相连。</p><p>如果我们不加上面这句话，很可能就会跳到其它无关紧要的节点上，并且陷入死循环。</p><p><code>if (dep[x] &gt; dep[y]) swap(x, y);</code> 这句话就是为了处理当x,y跳到了同一条链上的时候该如何处理（也就是求出两点的LCA）。</p><p>于是我们也可以上述程序写出求LCA的程序：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) swap(x, y);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (dep[x] &gt; dep[y]) swap(x, y);</span><br><span class="line"><span class="hljs-keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，说一些关于树链剖分时间复杂度的问题。</p><p>树链剖分的复杂度真的很优秀，查询一次最坏复杂度是 $\log n$，而大多数情况下跑不满。同机房的Juan_feng对树链剖分的时间复杂度做出了证明：</p><blockquote><p>任何一个点到根节点至多经过$\log$条轻边。</p></blockquote><blockquote><p>因为每个点如果经过一条轻边走向他的父亲，那么他的父亲的siz就至少是这个节点的2倍，所以最多经过log条轻边</p></blockquote><p>终于，树链剖分完毕！</p><p>下面是几道例题：</p><p><a href="https://www.luogu.org/problemnew/show/P2146" target="_blank" rel="noopener">[NOI2015]软件包管理器</a></p><p><a href="https://www.luogu.org/problemnew/show/P2486" target="_blank" rel="noopener">[SDOI2011]染色</a></p><p><a href="https://www.luogu.org/problemnew/show/P3178" target="_blank" rel="noopener">[HAOI2015]树上操作</a></p><h6 id="如果写得有问题可在下方评论回复QWQ"><a href="#如果写得有问题可在下方评论回复QWQ" class="headerlink" title="如果写得有问题可在下方评论回复QWQ"></a>如果写得有问题可在下方评论回复QWQ</h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果有个题目，要求你在数列上区间求和，支持修改。&lt;/p&gt;
&lt;p&gt;那么这道题就是很简单的线段树板子题，对吧？&lt;/p&gt;
&lt;p&gt;但是，这个世界是残酷的。为了不让题目那么简单，邪恶的出题人会把序列上的转换到树上，使题目难度增加一倍甚至几倍。&lt;/p&gt;
&lt;p&gt;这样一看，完了，线段树可处理不了树上的操作啊&lt;del&gt;，顿时感到人生苦短，失去了活下去的勇气&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;那么，一个神奇的而又强大的东西——树链剖分可以解决上述问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="算法讲解" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>-图论-最短路- [洛谷 P2243]电路维修</title>
    <link href="http://yoursite.com/2019/03/13/69/"/>
    <id>http://yoursite.com/2019/03/13/69/</id>
    <published>2019-03-13T12:47:44.000Z</published>
    <updated>2019-03-13T12:56:57.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P2243" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><del>打死也不用纯搜索</del></p><p>这题我们可以考虑最短路</p><p>如果一个字符是’\’，那么我们可以从左上到右下连一条权值为零的边，表示从左上到右下不需要旋转，从右上到左下连一条权值为1的边，表示需要旋转；如果是’/‘，那么则相反</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1001000</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nx, w;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> head[MAXN], ecnt, n, m, x, y, dis[MAXN], T;</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="hljs-keyword">char</span> ele[MAXN];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], w&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> id, w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (node a, node b) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> a.w &gt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="hljs-built_in">std</span>::priority_queue &lt;node&gt; q;</span><br><span class="line">    dis[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    q.push((node) &#123;s, <span class="hljs-number">0</span>&#125;);</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        node v = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="hljs-keyword">int</span> u = v.id;</span><br><span class="line">        <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (dis[to] &gt; dis[u] + e[i].w) &#123;</span><br><span class="line">                dis[to] = dis[u] + e[i].w;</span><br><span class="line">                q.push((node) &#123;to, dis[to]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (i - <span class="hljs-number">1</span>) * (m + <span class="hljs-number">1</span>) + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="hljs-keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(head));</span><br><span class="line">        <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dis));</span><br><span class="line">        ecnt = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, ele + <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (ele[j] == <span class="hljs-string">'/'</span>) &#123;</span><br><span class="line">                    add(g(i, j), g(i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);</span><br><span class="line">                    add(g(i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>), g(i, j), <span class="hljs-number">1</span>);</span><br><span class="line">                    add(g(i + <span class="hljs-number">1</span>, j), g(i, j + <span class="hljs-number">1</span>), <span class="hljs-number">0</span>);</span><br><span class="line">                    add(g(i, j + <span class="hljs-number">1</span>), g(i + <span class="hljs-number">1</span>, j), <span class="hljs-number">0</span>);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                    add(g(i, j), g(i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>), <span class="hljs-number">0</span>);</span><br><span class="line">                    add(g(i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>), g(i, j), <span class="hljs-number">0</span>);</span><br><span class="line">                    add(g(i + <span class="hljs-number">1</span>, j), g(i, j + <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);</span><br><span class="line">                    add(g(i, j + <span class="hljs-number">1</span>), g(i + <span class="hljs-number">1</span>, j), <span class="hljs-number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra(g(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));</span><br><span class="line">        <span class="hljs-keyword">if</span> (dis[g(n + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>)] &gt; <span class="hljs-number">2000000000</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO SOLUTION"</span>);</span><br><span class="line">            <span class="hljs-keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, dis[g(n + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2243&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>-二分- [洛谷 P3939]数颜色</title>
    <link href="http://yoursite.com/2019/03/06/68/"/>
    <id>http://yoursite.com/2019/03/06/68/</id>
    <published>2019-03-06T11:09:38.000Z</published>
    <updated>2019-03-07T02:33:19.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P3939" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>先声明一下，以后的题解不再粘贴题面。</p><p>这道题我们可以用vector存下每种颜色所在的位置，然后再二分一下就可以了，甚至连离散化都不需要。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 300010</span></span><br><span class="line"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, op, l, r, x, a[MAXN];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        v[a[i]].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;op);</span><br><span class="line">        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">            <span class="hljs-keyword">int</span> pos = <span class="hljs-built_in">std</span>::upper_bound(v[x].begin(), v[x].end(), r) - <span class="hljs-built_in">std</span>::lower_bound(v[x].begin(), v[x].end(), l);</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, pos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="hljs-keyword">int</span> ll = a[x], rr = a[x + <span class="hljs-number">1</span>];</span><br><span class="line">            <span class="hljs-built_in">std</span>::swap(a[x], a[x + <span class="hljs-number">1</span>]);</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[x] == a[x + <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            <span class="hljs-keyword">int</span> pos = <span class="hljs-built_in">std</span>::lower_bound(v[ll].begin(), v[ll].end(), x) - v[ll].begin();</span><br><span class="line">            <span class="hljs-keyword">int</span> _pos = <span class="hljs-built_in">std</span>::lower_bound(v[rr].begin(), v[rr].end(), x + <span class="hljs-number">1</span>) - v[rr].begin();</span><br><span class="line">            v[ll][pos] = x + <span class="hljs-number">1</span>;</span><br><span class="line">            v[rr][_pos] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3939&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>-其它- STman常犯的SB错误合集[不定期更新]</title>
    <link href="http://yoursite.com/2019/03/06/67/"/>
    <id>http://yoursite.com/2019/03/06/67/</id>
    <published>2019-03-06T03:42:09.000Z</published>
    <updated>2019-05-23T03:37:58.768Z</updated>
    
    <content type="html"><![CDATA[<p>注：错误代码都是用我的码风写的</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> b;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (l == r) &#123;</span><br><span class="line">b[p] = a[l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">build(l, m, ls(p));</span><br><span class="line">build(m + <span class="hljs-number">1</span>, r, ls(p));</span><br><span class="line">pd(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// 曾经常犯，现在不怎么犯了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> a, b, c;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, a, b, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (fa[x] = x) <span class="hljs-keyword">return</span> x;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> fa[x] = find(fa[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, &amp;a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &lt;= <span class="hljs-number">1</span>; i--) &#123;</span><br><span class="line"><span class="hljs-comment">/* */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">char</span> n;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i++) &#123;</span><br><span class="line">        <span class="hljs-comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：错误代码都是用我的码风写的&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>-分块-数论- [CF920F]SUM and REPLACE</title>
    <link href="http://yoursite.com/2019/03/05/66/"/>
    <id>http://yoursite.com/2019/03/05/66/</id>
    <published>2019-03-05T13:54:16.000Z</published>
    <updated>2019-03-05T14:00:01.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个数组$a_i$​，$D(x)$为$x$的约数个数</p><p>两种操作：</p><p>1.将$[l,r]$的$a_i$替换为$D(a_i)$</p><p>2.输出$\sum^r_{i=l}a_i$</p><a id="more"></a><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><p>7 6<br>6 4 1 10 3 2 4<br>2 1 7<br>2 4 5<br>1 3 5<br>2 4 4<br>1 5 7<br>2 1 7</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><p>30<br>13<br>4<br>22</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题和上帝造题七分钟2有点相似，只不过是把区间开放方成了区间改约数个数。</p><p>标记是块内是否每个数都小于等于2。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 3010002</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MX 1000100</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> b[MAXN], n, sq, m;</span><br><span class="line">ll s[MAXN], a[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> v[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> chk[MX];</span><br><span class="line"><span class="hljs-keyword">int</span> p[MX], d[MX], tot, num[MX];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &gt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getd</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    chk[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">    d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= MX; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!chk[i]) &#123;</span><br><span class="line">            p[++tot] = i;</span><br><span class="line">            d[i] = <span class="hljs-number">2</span>;</span><br><span class="line">            num[i] = <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= MX; j++) &#123;</span><br><span class="line">            chk[i * p[j]] = <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!(i % p[j])) &#123;</span><br><span class="line">                num[i * p[j]] = num[i] + <span class="hljs-number">1</span>;</span><br><span class="line">                d[i * p[j]] = d[i] / (num[i] + <span class="hljs-number">1</span>) * (num[i * p[j]] + <span class="hljs-number">1</span>);</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                d[i * p[j]] = d[i] * d[p[j]];</span><br><span class="line">                num[i * p[j]] = <span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quarysqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (v[x]) <span class="hljs-keyword">return</span>;</span><br><span class="line">    v[x] = <span class="hljs-number">1</span>;</span><br><span class="line">    a[x] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (x - <span class="hljs-number">1</span>) * sq + <span class="hljs-number">1</span>; i &lt;= x * sq; i++) &#123;</span><br><span class="line">        s[i] = d[s[i]];</span><br><span class="line">        a[x] += s[i];</span><br><span class="line">        <span class="hljs-keyword">if</span> (s[i] &gt; <span class="hljs-number">2</span>) v[x] = <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (v[b[x]] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x; i &lt;= min(b[x] * sq, y); i++) &#123;</span><br><span class="line">            a[b[x]] -= s[i];</span><br><span class="line">            s[i] = d[s[i]];</span><br><span class="line">            a[b[x]] += s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        v[b[x]] = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (b[x] - <span class="hljs-number">1</span>) * sq + <span class="hljs-number">1</span>; i &lt;= b[x] * sq; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (s[i] &gt; <span class="hljs-number">2</span>) &#123;</span><br><span class="line">                v[b[x]] = <span class="hljs-number">0</span>;</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (b[x] != b[y] &amp;&amp; v[b[y]] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (b[y] - <span class="hljs-number">1</span>) * sq + <span class="hljs-number">1</span>; i &lt;= y; i++) &#123;</span><br><span class="line">            a[b[y]] -= s[i];</span><br><span class="line">            s[i] = d[s[i]];</span><br><span class="line">            a[b[y]] += s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        v[b[y]] = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (b[y] - <span class="hljs-number">1</span>) * sq + <span class="hljs-number">1</span>; i &lt;= b[y] * sq; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (s[i] &gt; <span class="hljs-number">2</span>) &#123;</span><br><span class="line">                v[b[y]] = <span class="hljs-number">0</span>;</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = b[x] + <span class="hljs-number">1</span>; i &lt;= b[y] - <span class="hljs-number">1</span>; i++) &#123;</span><br><span class="line">        quarysqrt(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x , <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x; i &lt;= min(b[x] * sq , y); i++) &#123;</span><br><span class="line">        ans += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (b[x] != b[y]) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (b[y] - <span class="hljs-number">1</span>) * sq + <span class="hljs-number">1</span>; i &lt;= y; i++) &#123;</span><br><span class="line">            ans += s[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = b[x] + <span class="hljs-number">1</span>; i &lt; b[y]; i++) &#123;</span><br><span class="line">        ans += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(v, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> (v));</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    getd();</span><br><span class="line">    sq = <span class="hljs-built_in">sqrt</span>(n);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        b[i] = (i - <span class="hljs-number">1</span>) / sq + <span class="hljs-number">1</span>;</span><br><span class="line">        a[b[i]] += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x, y, c;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;c, &amp;x, &amp;y);</span><br><span class="line">        <span class="hljs-keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            swap(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            add(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, getsum(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给你一个数组$a_i$​，$D(x)$为$x$的约数个数&lt;/p&gt;
&lt;p&gt;两种操作：&lt;/p&gt;
&lt;p&gt;1.将$[l,r]$的$a_i$替换为$D(a_i)$&lt;/p&gt;
&lt;p&gt;2.输出$\sum^r_{i=l}a_i$&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="分块" scheme="http://yoursite.com/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>-网络流-最小割- [洛谷 P2777][网络流24题]方格取数问题</title>
    <link href="http://yoursite.com/2019/03/05/65/"/>
    <id>http://yoursite.com/2019/03/05/65/</id>
    <published>2019-03-05T13:46:56.000Z</published>
    <updated>2019-03-05T13:53:54.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>none!</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个有 m*n 个方格的棋盘中，每个方格中有一个正整数。现要从方格中取数，使任意 2 个数所在方格没有公共边，且取出的数的总和最大。试设计一个满足要求的取数算法。对于给定的方格棋盘，按照取数要求编程找出总和最大的数。</p><a id="more"></a><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 1 行有 2 个正整数 m 和 n，分别表示棋盘的行数和列数。接下来的 m 行，每行有 n 个正整数，表示棋盘方格中的数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>程序运行结束时，将取数的最大总和输出</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><p>3 3<br>1 2 3<br>3 2 3<br>2 3 1 </p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><p>11</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>m,n&lt;=100</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题我们考虑最小割。</p><p>先把这张图黑白染色<del>管他对不对，先染色再说</del>，然后把源点都连向黑点，白点都连向汇点，容量为这个点的数值。</p><p>最后再根据黑白点的情况想四周连边就行了。</p><p><del>我绝对不会告诉你我因为手写min函数错了改了好长时间QAQ</del></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1100100</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 2000000000</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nx, w;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, head[MAXN], ecnt = <span class="hljs-number">1</span>, x, y, z, r, k, dep[MAXN], cur[MAXN], tot;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], w&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;f, head[t], <span class="hljs-number">0</span>&#125;;</span><br><span class="line">    head[t] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dep));</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * m + m * n + <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">        cur[i] = head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dep[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[v]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (dep[to] &gt; INF &amp;&amp; e[i].w) &#123;</span><br><span class="line">                dep[to] = dep[v] + <span class="hljs-number">1</span>;</span><br><span class="line">                q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (dep[t] &lt; INF) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!l || u == t) <span class="hljs-keyword">return</span> l;</span><br><span class="line">    <span class="hljs-keyword">int</span> fl = <span class="hljs-number">0</span>, f;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = cur[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="hljs-keyword">if</span> (dep[to] == dep[u] + <span class="hljs-number">1</span> &amp;&amp; (f = dfs(to, t, min(l, e[i].w)))) &#123;</span><br><span class="line">            fl += f;</span><br><span class="line">            l -= f;</span><br><span class="line">            e[i ^ <span class="hljs-number">1</span>].w += f;</span><br><span class="line">            e[i].w -= f;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!l) <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> fl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> maxf = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">        maxf += dfs(s, t, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> maxf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> i * m + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    r = n * m + m * n + <span class="hljs-number">1</span>;</span><br><span class="line">    k = r + <span class="hljs-number">1</span>;</span><br><span class="line">    tot = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);</span><br><span class="line">            tot += x;</span><br><span class="line">            <span class="hljs-keyword">int</span> id = g(i, j);</span><br><span class="line">            <span class="hljs-keyword">if</span> ((i + j) &amp; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">                add(r, id, x);</span><br><span class="line">                <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>) add(id, g(i - <span class="hljs-number">1</span>, j), INF);</span><br><span class="line">                <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>) add(id, g(i, j - <span class="hljs-number">1</span>), INF);</span><br><span class="line">                <span class="hljs-keyword">if</span> (i &lt; n) add(id, g(i + <span class="hljs-number">1</span>, j), INF);</span><br><span class="line">                <span class="hljs-keyword">if</span> (j &lt; m) add(id, g(i, j + <span class="hljs-number">1</span>), INF);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                add(id, k, x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, tot - Dinic(r, k));</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目背景&quot;&gt;&lt;a href=&quot;#题目背景&quot; class=&quot;headerlink&quot; title=&quot;题目背景&quot;&gt;&lt;/a&gt;题目背景&lt;/h2&gt;&lt;p&gt;none!&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在一个有 m*n 个方格的棋盘中，每个方格中有一个正整数。现要从方格中取数，使任意 2 个数所在方格没有公共边，且取出的数的总和最大。试设计一个满足要求的取数算法。对于给定的方格棋盘，按照取数要求编程找出总和最大的数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最小割" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E5%89%B2/"/>
    
      <category term="网络流24题" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>-网络流-费用流- [洛谷 P2045]方格取数加强版</title>
    <link href="http://yoursite.com/2019/03/04/64/"/>
    <id>http://yoursite.com/2019/03/04/64/</id>
    <published>2019-03-04T03:37:03.000Z</published>
    <updated>2019-03-04T03:49:22.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个n*n的矩阵,每一格有一个非负整数Aij,(Aij &lt;= 1000)现在从(1,1)出发,可以往右或者往下走,最后到达(n,n),每达到一格,把该格子的数取出来,该格子的数就变成0,这样一共走K次,现在要求K次所达到的方格的数的和最大</p><a id="more"></a><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个数n,k（1&lt;=n&lt;=50, 0&lt;=k&lt;=10）</p><p>接下来n行,每行n个数,分别表示矩阵的每个格子的数</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个数,为最大和</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><p>3 1<br>1 2 3<br>0 2 1<br>1 4 2</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><p>11</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>每个格子中的数不超过1000</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这个题目要求走k次，每走一次将经过方格中的数取出，取过的数不能再取</p><p>显然DP做不了<del>，如果能做请私聊我</del></p><p>那么，我们就要拿出终极武器——网络流中的费用流。</p><p>那么该如何建模呢？</p><p>先拆点，将每个点拆成两个点</p><p>因为题目要求从(1,1)开始，从(n,n)结束，那么就可以将源点连向(1,1)，将(n,n)连向汇点。</p><p>因为只能向下走和向右走，所以就将每个点向右和向下连边。</p><p>对于有数的点建一条边流量为1，费用为这个数。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 2000000000</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nx, fl, w;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, r, k, head[MAXN], dis[MAXN], ecnt = <span class="hljs-number">1</span>, flow[MAXN], maxf, minc, la[MAXN], pre[MAXN], x, y, z, f, mp[<span class="hljs-number">60</span>][<span class="hljs-number">60</span>];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> fl, <span class="hljs-keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], fl, w&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;f, head[t], <span class="hljs-number">0</span>, -w&#125;;</span><br><span class="line">    head[t] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(flow, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(flow));</span><br><span class="line">    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">    q.push(s);</span><br><span class="line">    dis[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    vis[s] = <span class="hljs-number">1</span>;</span><br><span class="line">    pre[t] = <span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[v] = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[v]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> f = e[i].fl;</span><br><span class="line">            <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (f &gt; <span class="hljs-number">0</span> &amp;&amp; dis[to] &gt; dis[v] + e[i].w) &#123;</span><br><span class="line">                dis[to] = dis[v] + e[i].w;</span><br><span class="line">                pre[to] = v;</span><br><span class="line">                la[to] = i;</span><br><span class="line">                flow[to] = min(flow[v], f);</span><br><span class="line">                <span class="hljs-keyword">if</span> (!vis[to]) &#123;</span><br><span class="line">                    vis[to] = <span class="hljs-number">1</span>;</span><br><span class="line">                    q.push(to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> pre[t] != <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (i - <span class="hljs-number">1</span>) * n + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mcmf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span> (spfa(s, t)) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> v = t;</span><br><span class="line">        maxf += flow[t];</span><br><span class="line">        minc += flow[t] * dis[t];</span><br><span class="line">        <span class="hljs-keyword">while</span> (v != s) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> k = la[v];</span><br><span class="line">            e[k].fl -= flow[t];</span><br><span class="line">            e[k ^ <span class="hljs-number">1</span>].fl += flow[t];</span><br><span class="line">            v = pre[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    r = <span class="hljs-number">2</span> * n * n + <span class="hljs-number">1</span>;</span><br><span class="line">    k = <span class="hljs-number">2</span> * n * n + <span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;mp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    add(r, g(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), m, <span class="hljs-number">0</span>);</span><br><span class="line">    add(g(n, n) + n * n, k, m, <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            add(g(i, j), g(i, j) + n * n, <span class="hljs-number">1</span>, -mp[i][j]);</span><br><span class="line">            add(g(i, j), g(i, j) + n * n, INF, <span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (i &lt; n) &#123;</span><br><span class="line">                add(g(i, j) + n * n, g(i + <span class="hljs-number">1</span>, j), INF, <span class="hljs-number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (j &lt; n) &#123;</span><br><span class="line">                add(g(i, j) + n * n, g(i, j + <span class="hljs-number">1</span>), INF, <span class="hljs-number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mcmf(r, k);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, -minc);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给出一个n*n的矩阵,每一格有一个非负整数Aij,(Aij &amp;lt;= 1000)现在从(1,1)出发,可以往右或者往下走,最后到达(n,n),每达到一格,把该格子的数取出来,该格子的数就变成0,这样一共走K次,现在要求K次所达到的方格的数的和最大&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="费用流" scheme="http://yoursite.com/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>-网络流-最大流- [洛谷 P5192]Zoj3229 Shoot the Bullet|东方文花帖</title>
    <link href="http://yoursite.com/2019/03/02/63/"/>
    <id>http://yoursite.com/2019/03/02/63/</id>
    <published>2019-03-02T12:24:22.000Z</published>
    <updated>2019-03-03T06:41:20.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>Translated by @chen_zhe</p><p>幻想乡是一个被博丽大结界和虚幻与现实的境界所包围起来的一个美妙的地方。这里人和其他生物，例如妖怪、妖精等核平共处。</p><p>射命丸文（Syameimaru Aya）是一只鸦天狗，拥有操纵风的能力，已经活了千岁以上，是《文文。新闻》的主编，拥有着一本叫做《文花帖》的手账，记录幻想乡各地的大新闻。她不仅是天狗中速度最快的鸦天狗，思考能力非常强，以别人的几倍的思考速度思考，也拥有幻想乡最高等级的力量。</p><p>（译者内心O.S.：远古的东方众都那么硬核科普的吗）</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>（附注：文花帖8-8 西行寺幽幽子 「死蝶浮月」）</p><p>在接下来的$n$天中，射命丸文将要拍摄幻想乡的少女的照片并且从中为第$x$个少女拍摄GxG_xGx​张照片刊登在《文文。新闻》上。在第$k$天的时候文文有$C_k$个取材对象，且对于每个取材对象拍的照片必须在闭区间$[L_{k_i},R_{k_i}]$中。如果过少，文文就搞不出大新文；如果过多，就会有少女很安格瑞。</p><p>除此之外，因为拍照设备的原因，对于第$i$天，每天的拍照数量不能超过$D_i$张。在满足这些限定的条件下，文文希望拍到的照片尽可能地多。</p><p>由于文文需要去取材，因此她把这个任务交给了你，让你帮她去解决。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>本题不定组数据，确保数据组数不超过$10$</p><p>第一行输入两个整数$n$和$m$，分别表示有$n$天，有$m$位少女。其中$n \leq 365,m \leq 1000$</p><p>接下来一行，有$m$个数字$G_1 \cdots G_m$，对于每一个$G_x$，都满足$G_x \in [0,10^5]$。</p><p>再接下来$n$段，每一段的第一行有两个整数$C,D(1 \leq C \leq 300, 0 \leq D \leq 30000)$</p><p>接下来有$C$行，每一行有三个整数$T,L,R(0 \leq T &lt; m, 0 \leq L \leq R \leq 100)$</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>如果无法满足文文的需求，那么请输出-1</p><p>否则请输出在满足需求的情况下，文文最多能拍多少张照片。</p><p>注意每输出完一组数据之后，中间要空一行。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><p>2 3<br>12 12 12<br>3 18<br>0 3 9<br>1 3 9<br>2 3 9<br>3 18<br>0 3 9<br>1 3 9<br>2 3 9</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><p>36</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>终于可以有一篇黑题的题解辣！<del>至少在写题解时这题是黑的</del></p><p>下面进入正题：</p><p><strong>有源汇的上下界网络最大流</strong></p><p>这道题有一个很明显的地方告诉你要用有上下界网络流：</p><blockquote><p>且对于每个取材对象拍的照片<strong>必须</strong>在闭区间$[L_{k_i},R_{k_i}]$中</p></blockquote><p>那么怎么求有源汇的上下界网络最大流呢？</p><p>我们抛开有源汇的最大流，先搞无源汇的上下界网络可行流</p><p>关于无源汇的上下界网络可行流的证明及做法，个人讲得不太清楚，可参考这篇<a href="https://blog.csdn.net/wu_tongtong/article/details/73320968" target="_blank" rel="noopener">博客</a><del>（其实就是我懒得写）</del></p><p>现在问题来了，如果你已经求出了可行流，那么该怎样求有源汇的网络最大流呢？</p><p>这个很简单，只需要连一条从源点到汇点容量为INF的边，然后再在残量网络跑一边最大流就可以了。<del>具体证明见百度</del></p><p>最后我们就可以根据题意建边了<del>表示读题用了20min</del></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1000100</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 2000000000</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> clear(x) memset(x, 0, sizeof(x));</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> v, nx, w;</span><br><span class="line">&#125; e[MAXN];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> a;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> head[MAXN], ecnt = <span class="hljs-number">1</span>, n, m, p, x, _l, _r;</span><br><span class="line"><span class="hljs-keyword">int</span> dep[MAXN], cur[MAXN], di[MAXN], r, k, ans, tot, _s, <span class="hljs-keyword">_t</span>, _c, _d;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge)&#123; t, head[f], w &#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">    e[++ecnt] = (Edge)&#123; f, head[t], <span class="hljs-number">0</span> &#125;;</span><br><span class="line">    head[t] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">0x7f</span>, <span class="hljs-keyword">sizeof</span>(dep));</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        cur[i] = head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    dep[s] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="hljs-keyword">if</span> (dep[to] &gt; INF &amp;&amp; e[i].w) &#123;</span><br><span class="line">                dep[to] = dep[u] + <span class="hljs-number">1</span>;</span><br><span class="line">                q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> dep[t] &lt; INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!l || s == t) <span class="hljs-keyword">return</span> l;</span><br><span class="line">    <span class="hljs-keyword">int</span> fl = <span class="hljs-number">0</span>, f;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = cur[s]; i; i = e[i].nx) &#123;</span><br><span class="line">        cur[s] = i;</span><br><span class="line">        <span class="hljs-keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="hljs-keyword">if</span> (dep[to] == dep[s] + <span class="hljs-number">1</span> &amp;&amp; (f = dfs(to, t, min(l, e[i].w)))) &#123;</span><br><span class="line">            fl += f;</span><br><span class="line">            l -= f;</span><br><span class="line">            e[i].w -= f;</span><br><span class="line">            e[i ^ <span class="hljs-number">1</span>].w += f;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!l) <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> fl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> maxf = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">        maxf += dfs(s, t, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> maxf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;m, &amp;n) != EOF) &#123;</span><br><span class="line">        _s = n + m + <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">_t</span> = _s + <span class="hljs-number">1</span>;</span><br><span class="line">        r = <span class="hljs-keyword">_t</span> + <span class="hljs-number">1</span>;</span><br><span class="line">        k = r + <span class="hljs-number">1</span>;</span><br><span class="line">        clear(head);</span><br><span class="line">        clear(di);</span><br><span class="line">        ecnt = <span class="hljs-number">1</span>;</span><br><span class="line">        ans = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;p);</span><br><span class="line">            add(i, <span class="hljs-keyword">_t</span>, INF);</span><br><span class="line">            di[i] -= p;</span><br><span class="line">            di[<span class="hljs-keyword">_t</span>] += p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;_c, &amp;_d);</span><br><span class="line">            add(_s, i + n, _d);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= _c; j++) &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;x, &amp;_l, &amp;_r);</span><br><span class="line">                x++;</span><br><span class="line">                add(i + n, x, _r - _l);</span><br><span class="line">                di[i + n] -= _l;</span><br><span class="line">                di[x] += _l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m + <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (di[i] &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                ans += di[i];</span><br><span class="line">                add(r, i, di[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                add(i, k, -di[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        add(<span class="hljs-keyword">_t</span>, _s, INF);</span><br><span class="line">        tot = Dinic(r, k);</span><br><span class="line">        <span class="hljs-keyword">if</span> (tot != ans) <span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, Dinic(_s, <span class="hljs-keyword">_t</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目背景&quot;&gt;&lt;a href=&quot;#题目背景&quot; class=&quot;headerlink&quot; title=&quot;题目背景&quot;&gt;&lt;/a&gt;题目背景&lt;/h2&gt;&lt;p&gt;Translated by @chen_zhe&lt;/p&gt;
&lt;p&gt;幻想乡是一个被博丽大结界和虚幻与现实的境界所包围起来的一个美妙的地方。这里人和其他生物，例如妖怪、妖精等核平共处。&lt;/p&gt;
&lt;p&gt;射命丸文（Syameimaru Aya）是一只鸦天狗，拥有操纵风的能力，已经活了千岁以上，是《文文。新闻》的主编，拥有着一本叫做《文花帖》的手账，记录幻想乡各地的大新闻。她不仅是天狗中速度最快的鸦天狗，思考能力非常强，以别人的几倍的思考速度思考，也拥有幻想乡最高等级的力量。&lt;/p&gt;
&lt;p&gt;（译者内心O.S.：远古的东方众都那么硬核科普的吗）&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="http://yoursite.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="http://yoursite.com/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>-LCT- [BZOJ 2843]极地旅行社</title>
    <link href="http://yoursite.com/2019/02/18/62/"/>
    <id>http://yoursite.com/2019/02/18/62/</id>
    <published>2019-02-18T06:34:59.000Z</published>
    <updated>2019-02-18T06:42:28.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>不久之前，Mirko建立了一个旅行社，名叫“极地之梦”。这家旅行社在北极附近购买了N座冰岛，并且提供观光服<br>务。当地最受欢迎的当然是帝企鹅了，这些小家伙经常成群结队的游走在各个冰岛之间。Mirko的旅行社遭受一次<br>重大打击，以至于观光游轮已经不划算了。<a id="more"></a>旅行社将在冰岛之间建造大桥，并用观光巴士来运载游客。Mirko希望<br>开发一个电脑程序来管理这些大桥的建造过程，以免有不可预料的错误发生。这些冰岛从1到N标号。一开始时这些<br>岛屿没有大桥连接，并且所有岛上的帝企鹅数量都是知道的。每座岛上的企鹅数量虽然会有所改变，但是始终在[0<br>, 1000]之间。你的程序需要处理以下三种命令：<br>1.”bridge A B”——在A与B之间建立一座大桥（A与B是不同的岛屿）。由于经费限制，这项命令被接受，当且仅当<br>A与B不联通。若这项命令被接受，你的程序需要输出”yes”，之<br>后会建造这座大桥。否则，你的程序需要输出”no”。<br>2.”penguins A X”——根据可靠消息，岛屿A此时的帝企鹅数量变为X。这项命令只是用来提供信息的，你的程序不<br>需要回应。<br>3.”excursion A B”——一个旅行团希望从A出发到B。若A与B连通，你的程序需要输出这个旅行团一路上所能看到的<br>帝企鹅数量（包括起点A与终点B），若不联通，你的程序需要输出”impossible”。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个正整数N，表示冰岛的数量。<br>第二行N个范围[0, 1000]的整数，为每座岛屿初始的帝企鹅数量。<br>第三行一个正整数M，表示命令的数量。接下来M行即命令，为题目描述所示。<br>1&lt;=N&lt;=30000,1&lt;=M&lt;=100000</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每个bridge命令与excursion命令，输出一行，为题目描述所示。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><p>5<br>4 2 4 5 6<br>10<br>excursion 1 1<br>excursion 1 2<br>bridge 1 2<br>excursion 1 2<br>bridge 3 4<br>bridge 3 5<br>excursion 4 5<br>bridge 1 3<br>excursion 2 4<br>excursion 2 5</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><p>impossible<br>yes<br>6<br>yes<br>yes<br>15<br>yes<br>15<br>16</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>最近刚学了一个Link-Cut Tree，于是找了几个题练习。</p><p>这道题是道LCT裸题，就是修改操作有些麻烦，需要splay一下在修改。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls(x) c[x][0]</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs(x) c[x][1]</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="hljs-keyword">int</span> si[MAXN], val[MAXN], st[MAXN], c[MAXN][<span class="hljs-number">2</span>], f[MAXN];</span><br><span class="line"><span class="hljs-keyword">bool</span> r[MAXN];</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, u, v;</span><br><span class="line"><span class="hljs-keyword">char</span> op[<span class="hljs-number">10</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ifr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ls(f[p]) == p || rs(f[p]) == p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">si[p] = si[ls(p)] + si[rs(p)] + val[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> t = ls(p);</span><br><span class="line">ls(p) = rs(p);</span><br><span class="line">rs(p) = t;</span><br><span class="line">r[p] ^= <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (r[p]) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (ls(p)) flit(ls(p));</span><br><span class="line"><span class="hljs-keyword">if</span> (rs(p)) flit(rs(p));</span><br><span class="line">r[p] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> x = f[p], y = f[x], k = rs(x) == p, w = c[p][!k];</span><br><span class="line"><span class="hljs-keyword">if</span> (ifr(x)) c[y][c[y][<span class="hljs-number">1</span>] == x] = p;</span><br><span class="line">c[p][!k] = x;</span><br><span class="line">c[x][k] = w;</span><br><span class="line"><span class="hljs-keyword">if</span> (w) f[w] = x;</span><br><span class="line">f[x] = p;</span><br><span class="line">f[p] = y;</span><br><span class="line">pd(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> y = p, z = <span class="hljs-number">0</span>;</span><br><span class="line">st[++z] = y;</span><br><span class="line"><span class="hljs-keyword">while</span> (ifr(y)) st[++z] = y = f[y];</span><br><span class="line"><span class="hljs-keyword">while</span> (z) pushd(st[z--]);</span><br><span class="line"><span class="hljs-keyword">while</span> (ifr(p)) &#123;</span><br><span class="line">y = f[p];</span><br><span class="line">z = f[y];</span><br><span class="line"><span class="hljs-keyword">if</span> (ifr(y)) &#123;</span><br><span class="line">rotate((ls(y) == p) ^ (ls(z) == y) ? p : y);</span><br><span class="line">&#125;</span><br><span class="line">rotate(p);</span><br><span class="line">&#125;</span><br><span class="line">pd(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; p; p = f[i = p]) &#123;</span><br><span class="line">splay(p);</span><br><span class="line">rs(p) = i;</span><br><span class="line">pd(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">access(p);</span><br><span class="line">splay(p);</span><br><span class="line">flit(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">access(p);</span><br><span class="line">splay(p);</span><br><span class="line"><span class="hljs-keyword">while</span> (ls(p)) &#123;</span><br><span class="line">pushd(p);</span><br><span class="line">p = ls(p);</span><br><span class="line">&#125;</span><br><span class="line">splay(p);</span><br><span class="line"><span class="hljs-keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">makeroot(x);</span><br><span class="line">access(y);</span><br><span class="line">splay(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">makeroot(x);</span><br><span class="line"><span class="hljs-keyword">if</span> (findr(y) != x) &#123;</span><br><span class="line">f[x] = y;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">makeroot(x);</span><br><span class="line"><span class="hljs-keyword">if</span> (findr(y) == x &amp;&amp; f[y] == x &amp;&amp; !ls(y)) &#123;</span><br><span class="line">f[y] = rs(x) = <span class="hljs-number">0</span>;</span><br><span class="line">pd(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;val[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="hljs-keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s%d%d"</span>, op, &amp;u, &amp;v);</span><br><span class="line"><span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">'b'</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (link(u, v)) &#123;</span><br><span class="line"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"yes"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"no"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">'p'</span>) &#123;</span><br><span class="line">splay(u);</span><br><span class="line">val[u] = v;</span><br><span class="line">pd(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">'e'</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (findr(u) == findr(v)) &#123;</span><br><span class="line">split(u, v);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, si[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"impossible"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;不久之前，Mirko建立了一个旅行社，名叫“极地之梦”。这家旅行社在北极附近购买了N座冰岛，并且提供观光服&lt;br&gt;务。当地最受欢迎的当然是帝企鹅了，这些小家伙经常成群结队的游走在各个冰岛之间。Mirko的旅行社遭受一次&lt;br&gt;重大打击，以至于观光游轮已经不划算了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="http://yoursite.com/tags/BZOJ/"/>
    
      <category term="LCT" scheme="http://yoursite.com/tags/LCT/"/>
    
  </entry>
  
</feed>
