<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RiverFun</title>
  
  <subtitle>任自己跌倒，站起来还是一样坚强勇敢。</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://stevebraveman.github.io/blog/"/>
  <updated>2019-09-29T08:17:03.994Z</updated>
  <id>https://stevebraveman.github.io/blog/</id>
  
  <author>
    <name>RiverFun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>-其它-颓废- n &lt;= 100 你能卡我？</title>
    <link href="https://stevebraveman.github.io/blog/2019/09/28/105/"/>
    <id>https://stevebraveman.github.io/blog/2019/09/28/105/</id>
    <published>2019-09-28T00:13:01.000Z</published>
    <updated>2019-09-29T08:17:03.994Z</updated>
    
    <content type="html"><![CDATA[<p>你们可能不知道，只用暴力，打到前十，是什么概念。我们一般只会用三个字形容这种人：成功人。</p><p>我经常说一句话，当年陈刀仔他能用暴力打进集训队，我 $***​$，用暴力打到AK比赛，不是问题。</p><p>埋伏它一手，这个题不能正解。这个题不用正解，它死定了。</p><p>反手写一个搜索，闷声发大财。它评得有点慢，但是不用怕，它的数据卡不了我。</p><p>图论，最短路，很牛逼这个题。如果能把这个题数据范围缩小，这个题能直接枚举水过，可是缩不得。</p><p>评测机，评测机你连 $ n \le 5 $的数据都评不了吗？评测机你快点呐，评测机，别磨磨蹭蹭的。</p><p>dfs，交错了，应该手写栈的。</p><p>给评测机倒杯茶好吧，评测机，给评测机倒杯卡布奇诺。</p><p>给评测机倒一杯卡布奇诺，开始你的评测秀，A掉它。</p><p>$10\% \ \ \ \ n \le 100​$，你能卡我？你能卡死我？你今天能用 $n \le 100​$ 把 $***​$ 卡了，我当场，就把这个电脑屏幕吃掉！</p><p>Time Limit Exceed. Score: 5.</p><p><img alt="" data-src="/blog/img/ma.jpg" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你们可能不知道，只用暴力，打到前十，是什么概念。我们一般只会用三个字形容这种人：成功人。&lt;/p&gt;
&lt;p&gt;我经常说一句话，当年陈刀仔他能用暴力打进集训队，我 $***​$，用暴力打到AK比赛，不是问题。&lt;/p&gt;
&lt;p&gt;埋伏它一手，这个题不能正解。这个题不用正解，它死定了。&lt;/
      
    
    </summary>
    
    
      <category term="其它" scheme="https://stevebraveman.github.io/blog/tags/%E5%85%B6%E5%AE%83/"/>
    
      <category term="颓废" scheme="https://stevebraveman.github.io/blog/tags/%E9%A2%93%E5%BA%9F/"/>
    
  </entry>
  
  <entry>
    <title>-图论-拓扑排序-二分- [洛谷 P4376][USACO18OPEN]Milking Order</title>
    <link href="https://stevebraveman.github.io/blog/2019/09/26/104/"/>
    <id>https://stevebraveman.github.io/blog/2019/09/26/104/</id>
    <published>2019-09-26T10:16:05.000Z</published>
    <updated>2019-09-26T10:25:45.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problem/P4376" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题我们可以考虑二分 $X$ 的位置，然后在 <code>check</code> 里面写一个拓扑排序就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200100</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nx;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], ecnt, l, r, n, m, d, y, la, top, rs[MAXN], ls[MAXN], ph[MAXN];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f]&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        head[i] = ls[i] = ph[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::priority_queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; (<span class="keyword">int</span>)v[i].size(); j++) &#123;</span><br><span class="line">            add(v[i][j - <span class="number">1</span>], v[i][j]);</span><br><span class="line">            ph[v[i][j]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ph[i]) q.push(-i);</span><br><span class="line">    &#125;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top();</span><br><span class="line">        u = -u;</span><br><span class="line">        q.pop();</span><br><span class="line">        top++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">            ph[to]--;</span><br><span class="line">            <span class="keyword">if</span> (!ph[to]) q.push(-to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("%d\n", top);</span></span><br><span class="line">    <span class="keyword">if</span> (top == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">last</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        head[i] = ls[i] = ph[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::priority_queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; (<span class="keyword">int</span>)v[i].size(); j++) &#123;</span><br><span class="line">            add(v[i][j - <span class="number">1</span>], v[i][j]);</span><br><span class="line">            <span class="comment">// printf("%d -&gt; %d\n", v[i][j - 1], v[i][j]);</span></span><br><span class="line">            <span class="comment">// if (v[i][j] == 8) puts("OK");</span></span><br><span class="line">            ph[v[i][j]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">// printf("%d\n", ph[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// puts("OK");</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ph[i]) q.push(-i);</span><br><span class="line">    &#125;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top();</span><br><span class="line">        u = -u;</span><br><span class="line">        q.pop();</span><br><span class="line">        rs[++top] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">            ph[to]--;</span><br><span class="line">            <span class="keyword">if</span> (!ph[to]) q.push(-to);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= d; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y);</span><br><span class="line">            v[i].push_back(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r = m;</span><br><span class="line">    l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// printf("%d\n", mid);</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    last(r);</span><br><span class="line">    <span class="comment">// puts("OK");</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= top; i++) &#123;</span></span><br><span class="line">    <span class="comment">// printf("%d ", rs[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4376&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="图论" scheme="https://stevebraveman.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="拓扑排序" scheme="https://stevebraveman.github.io/blog/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>-优先队列- [洛谷 P1168]中位数</title>
    <link href="https://stevebraveman.github.io/blog/2019/09/23/103/"/>
    <id>https://stevebraveman.github.io/blog/2019/09/23/103/</id>
    <published>2019-09-23T00:19:28.000Z</published>
    <updated>2019-09-23T00:48:09.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problem/P1168" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>闲来无事写一发水题题解</p><p>这道题我们可以用对顶堆来求中位数</p><p>创建两个堆，一个大根堆一个小根堆，每次插入一个数就进行比较，插入之后再平衡一下两个堆的大小</p><p>但是，非常坑的一点就是：</p><script type="math/tex; mode=display">\huge\texttt{priority_queue的size函数数据类型是usigned int！！！}</script><p><img alt="" data-src="/blog/img/xxbt.jpg" class="lozad"></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">int</span> n, m, l, a[MAXN];</span><br><span class="line"><span class="built_in">std</span>::priority_queue &lt;<span class="keyword">int</span>&gt; q1, q2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">1</span>] &gt; a[<span class="number">2</span>]) &#123;</span><br><span class="line">        q1.push(a[<span class="number">2</span>]);</span><br><span class="line">        q2.push(-a[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        q1.push(a[<span class="number">1</span>]);</span><br><span class="line">        q2.push(-a[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// printf("%d\n", i);</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; q1.top()) &#123;</span><br><span class="line">            q2.push(-a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            q1.push(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="keyword">int</span>)(q2.size() - q1.size()) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> b = q2.top();</span><br><span class="line">            b = -b;</span><br><span class="line">            q2.pop();</span><br><span class="line">            q1.push(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf("%d\n", q1.size() - q2.size());</span></span><br><span class="line">        <span class="keyword">while</span> ((<span class="keyword">int</span>)(q1.size() - q2.size()) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> b = q1.top();</span><br><span class="line">            <span class="comment">// printf("OK\n");</span></span><br><span class="line">            q1.pop();</span><br><span class="line">            q2.push(-b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// puts("OK");</span></span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (q1.size() &gt; q2.size()) ? q1.top() : -q2.top());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 6</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P1168&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="优先队列" scheme="https://stevebraveman.github.io/blog/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>-数论-博弈论- [CF1215D]Ticket Game</title>
    <link href="https://stevebraveman.github.io/blog/2019/09/18/102/"/>
    <id>https://stevebraveman.github.io/blog/2019/09/18/102/</id>
    <published>2019-09-18T03:23:00.000Z</published>
    <updated>2019-09-22T06:55:39.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="http://codeforces.com/problemset/problem/1215/D" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>非常不错的一道博弈论题目，模型有点像Bash博弈。</p><p>首先这道题我们可以这么理解：有两堆石头，其中一堆有 $x$ 个石头，只能放 $n$ 次石头，每次能放的石头数量不超过 $9$ 个，另一堆有 $y$ 个石头，能放 $m$次，每次能放的石头数量也不超过 $9$ 个。每次操作可以放 $0$ 个石头 。先手后手轮流操作，两堆石头都可以放，如果两堆石头能放的次数用完了，当且仅当两堆石头个数相等时后手赢，问后手是否有必胜策略。</p><p>根据题意我们可以得出这样一个结论：当且仅当 $n=m$ 以及 $x=y$ 时，后手必赢。</p><p>所以我们为了达到这个局面，必须要让其中一堆石头的个数小于另一堆石头并且这一堆石头能放的次数大于另一堆石头，或者是两堆石头的石头个数以及能放的次数均相等。</p><p>我们再来看题目，题目中说了 $n + m$ 是偶数，所以又可以得出 $|n - m|$ 一定是偶数。</p><p>所以如果出现了 $n &lt; m$ 且 $x &gt; y$ 的局面，要想让后手必赢，必须满足 $x - y = 9 * (m - n)$。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="keyword">char</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, p, q, x, y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="string">'?'</span>) p += a[i] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> x++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span> + <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="string">'?'</span>) q += a[i] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> y++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) <span class="built_in">std</span>::swap(x, y), <span class="built_in">std</span>::swap(p, q);</span><br><span class="line">    <span class="keyword">if</span> (p &gt; q) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Monocarp"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == q &amp;&amp; x == y) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Bicarp"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x -= y;</span><br><span class="line">    q -= p;</span><br><span class="line">    <span class="keyword">if</span> (q == (x / <span class="number">2</span>) * <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Bicarp"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Monocarp"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/1215/D&quot; targ
      
    
    </summary>
    
    
      <category term="数论" scheme="https://stevebraveman.github.io/blog/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="博弈论" scheme="https://stevebraveman.github.io/blog/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="Codeforces" scheme="https://stevebraveman.github.io/blog/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>-图论-拓扑排序- [LOJ 2114]「HNOI2015」菜肴制作</title>
    <link href="https://stevebraveman.github.io/blog/2019/09/16/101/"/>
    <id>https://stevebraveman.github.io/blog/2019/09/16/101/</id>
    <published>2019-09-16T10:36:31.000Z</published>
    <updated>2019-09-26T10:26:04.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://loj.ac/problem/2114" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目要求中说尽可能让编号小的优先，还要满足做菜顺序，于是我们可以将队列换成优先队列，然后再反向建图跑拓扑就行了，最后倒序输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100101</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nx;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], ecnt, n, T, m, x, y, ent[MAXN], st[MAXN], top, fl;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f]&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">memset</span>(ent, <span class="number">0</span>, <span class="keyword">sizeof</span>(ecnt));</span><br><span class="line">        <span class="built_in">memset</span>(ent, <span class="number">0</span>, <span class="keyword">sizeof</span>(ent));</span><br><span class="line">        ecnt = <span class="number">0</span>;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">            add(y, x);</span><br><span class="line">            ent[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::priority_queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ent[i]) q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.top();</span><br><span class="line">            st[++top] = u;</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">                <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">                ent[to]--;</span><br><span class="line">                <span class="keyword">if</span> (!ent[to]) q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fl = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ent[i] &gt;= <span class="number">1</span>) fl = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fl) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Impossible!"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = top; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, st[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2114&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="LOJ" scheme="https://stevebraveman.github.io/blog/tags/LOJ/"/>
    
      <category term="图论" scheme="https://stevebraveman.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="拓扑排序" scheme="https://stevebraveman.github.io/blog/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>-DP- [洛谷 P3478][POI2008]STA-Station</title>
    <link href="https://stevebraveman.github.io/blog/2019/09/08/100/"/>
    <id>https://stevebraveman.github.io/blog/2019/09/08/100/</id>
    <published>2019-09-08T03:05:38.000Z</published>
    <updated>2019-09-08T03:21:26.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problem/P3478" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>考虑使用换根法。</p><p>在每次换根的时候，有些节点的深度<code>+1</code>，而另外一些的节点深度就会<code>-1</code>。</p><p>所以，换根的方程为 <code>f[to] = d[to] - size[to] - 1 +（f[u] - d[to] + 1 + (n - size[to]))</code>，其中 <code>d</code> 为每个子树里的所有节点的深度之和，<code>size</code> 为子数大小。</p><p>简化一下：<code>f[to] = f[u] - 2 * size[to] + n</code></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nx;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], ecnt, n, m, x, y, dep[MAXN], f[MAXN], siz[MAXN], d[MAXN], ans, l;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f]&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> u, <span class="keyword">int</span> dp)</span> </span>&#123;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    dep[u] = dp;</span><br><span class="line">    d[u] = dp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (to == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(u, to, dp + <span class="number">1</span>);</span><br><span class="line">        siz[u] += siz[to];</span><br><span class="line">        d[u] += dep[to];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (to == fa) <span class="keyword">continue</span>;</span><br><span class="line">        f[to] = d[to] - siz[to] - <span class="number">1</span> + (f[u] - d[to] + <span class="number">1</span> + (n - siz[to]));</span><br><span class="line">        dfs2(u, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        add(x, y);</span><br><span class="line">        add(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    f[<span class="number">1</span>] = d[<span class="number">1</span>];</span><br><span class="line">    dfs2(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[i] &gt; ans) ans = f[i], l = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P3478&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="DP" scheme="https://stevebraveman.github.io/blog/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>-导数- [洛谷 P5515][MtOI2019]灵梦的计算器</title>
    <link href="https://stevebraveman.github.io/blog/2019/08/24/99/"/>
    <id>https://stevebraveman.github.io/blog/2019/08/24/99/</id>
    <published>2019-08-24T11:47:24.000Z</published>
    <updated>2019-09-22T06:55:33.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problem/P5515" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>前置知识：导数</strong></p><p>你需要了解导数的含义和一些初等函数的导数。</p><p>让我们先来用几何画板模拟一下这个题中的一个函数。</p><p><img alt="" data-src="/blog/img/d1.PNG" class="lozad"></p><p>我们会发现如果 $a,b​$ 都在所归定的数据范围内，这个函数图像形状很像二次函数，并且这个函数增长速度非常快。</p><p>我们设满足题意的最小 $n’$ 为 $a_1$ ，满足题意的最大 $n’$ 为 $a_2$。</p><p>所以 $f(a_1) - f(a_2) &lt; 1​$。</p><p>我们可以任取两个 $f(a_1),f(a_2)​$ 来观察一下。</p><p><img alt="" data-src="/blog/img/d2.PNG" class="lozad"></p><p>又可以发现这几个点围成了一个三角形的图案。</p><p>可能这时候有人会说：函数图像明明是曲线啊，怎么可能会是直线呢？</p><p>是的，确实是曲线，但是，用题目中所给的数据计算的话，得出的答案很大，已经到了可以忽略曲率的地步，并且题目要求的精度也不高，所以我们能够直接把这段函数图像看成直线。</p><p>但是为题又来了，该如何求它的斜率呢？</p><p>这时候，我们就需要用到导数了！</p><p>因为导数所求的是在函数任意一点处的斜率，而又因为 $f(n)​$ 一定在这段函数图像上，所以我们可以直接把 $f’(n)​$ 当做这个三角形斜边的斜率。</p><p>最后就可以得出答案 $a_2 - a_1 = \frac{0.999}{f’(n)}​$。</p><p>上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Mker &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uint unsigned int</span></span><br><span class="line">    uint sd;</span><br><span class="line">    <span class="keyword">int</span> op;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%u %d"</span>, &amp;sd, &amp;op);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> uint <span class="title">uint_rand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sd ^= sd &lt;&lt; <span class="number">13</span>;</span><br><span class="line">        sd ^= sd &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        sd ^= sd &lt;&lt; <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">return</span> sd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_n</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = (<span class="keyword">double</span>) (uint_rand() % <span class="number">100000</span>) / <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_k</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = (<span class="keyword">double</span>) (uint_rand() % <span class="number">100000</span>) / <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">return</span> (x + <span class="number">1</span>) * <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span> &amp;n,<span class="keyword">double</span> &amp;a, <span class="keyword">double</span> &amp;b)</span> </span>&#123;</span><br><span class="line">        n = get_n();</span><br><span class="line">        a = get_k();</span><br><span class="line">        <span class="keyword">if</span> (op) b = a;</span><br><span class="line">        <span class="keyword">else</span> b = get_k();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Mker;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">double</span> n, a, b, k, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        read(n, a, b);</span><br><span class="line">        k = a * <span class="built_in">pow</span>(n, a - <span class="number">1</span>) + b * <span class="built_in">pow</span>(n, b - <span class="number">1</span>);</span><br><span class="line">        ans += <span class="number">0.9999999</span> / k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%0.5f"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P5515&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="导数" scheme="https://stevebraveman.github.io/blog/tags/%E5%AF%BC%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>-网络流-费用流-二分图- [SDOI2006]仓库管理员的烦恼</title>
    <link href="https://stevebraveman.github.io/blog/2019/08/23/98/"/>
    <id>https://stevebraveman.github.io/blog/2019/08/23/98/</id>
    <published>2019-08-23T07:39:12.000Z</published>
    <updated>2019-09-22T06:55:25.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problem/P2457" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>好长时间没有写网络流了，所以就来练了一发。</p><p>写完之后我发现自己的代码真的是漏洞百出，查了半天错。。。</p><p><img alt="" data-src="/blog/img/zb.jpg" class="lozad"></p><p>这题建模不难，经典的二分图带权最大匹配，再用总的减去最大费用就行了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nx, w, c;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], r, k, ecnt = <span class="number">1</span>, m, n, x, y, dis[MAXN], maxf, minc, flow[MAXN], la[MAXN], pre[MAXN], tot;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], w, c&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;f, head[t], <span class="number">0</span>, -c&#125;;</span><br><span class="line">    head[t] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        dis[i] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    flow[s] = <span class="number">0x7fffffff</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    pre[t] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="keyword">if</span> (dis[to] &gt; dis[u] + e[i].c &amp;&amp; e[i].w) &#123;</span><br><span class="line">                dis[to] = dis[u] + e[i].c;</span><br><span class="line">                flow[to] = <span class="built_in">std</span>::min(e[i].w, flow[u]);</span><br><span class="line">                la[to] = i;</span><br><span class="line">                pre[to] = u;</span><br><span class="line">                <span class="keyword">if</span> (!vis[to]) &#123;</span><br><span class="line">                    vis[to] = <span class="number">1</span>;</span><br><span class="line">                    q.push(to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mcmf</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (spfa(s, t)) &#123;</span><br><span class="line">        minc += dis[t] * flow[t];</span><br><span class="line">        maxf += flow[t];</span><br><span class="line">        <span class="keyword">int</span> k = t;</span><br><span class="line">        <span class="keyword">while</span> (k) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = la[k];</span><br><span class="line">            e[l].w -= flow[t];</span><br><span class="line">            e[l ^ <span class="number">1</span>].w += flow[t];</span><br><span class="line">            k = pre[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf("%d %d\n", maxf, minc);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    r = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">    k = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        add(r, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        add(i + n, k, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            tot += x;</span><br><span class="line">            add(i, j + n, <span class="number">1</span>, -x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mcmf(r, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, tot + minc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2457&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="二分图" scheme="https://stevebraveman.github.io/blog/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="网络流" scheme="https://stevebraveman.github.io/blog/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="费用流" scheme="https://stevebraveman.github.io/blog/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>-数论-杜教筛-莫比乌斯反演- [LOJ 6491]「XXOI 2018」简单的最大公约数</title>
    <link href="https://stevebraveman.github.io/blog/2019/08/21/97/"/>
    <id>https://stevebraveman.github.io/blog/2019/08/21/97/</id>
    <published>2019-08-21T13:18:32.000Z</published>
    <updated>2019-08-21T23:04:44.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://loj.ac/problem/6491" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>先推一波柿子：</p><script type="math/tex; mode=display">\begin{align}\sum_{i_1=1}^m \sum_{i_2=1}^m \sum_{i_3=1}^m ...\sum_{i_n=1}^m \gcd(i_1,i_2,i_3,...,i_n) &= \sum_{d=1}^m \sum_{i_1=1}^m \sum_{i_2=1}^m \sum_{i_3=1}^m ...\sum_{i_n=1}^m [\gcd(i_1,i_2,i_3,...,i_n) = d]\\\\ &= \sum_{d=1}^m \sum_{i_1=1}^{\lfloor \frac{m}{d}\rfloor} \sum_{i_2=1}^{\lfloor \frac{m}{d}\rfloor} \sum_{i_3=1}^{\lfloor \frac{m}{d}\rfloor} ...\sum_{i_n=1}^{\lfloor \frac{m}{d}\rfloor} [\gcd(i_1,i_2,i_3,...,i_n) = 1] \\\\&= \sum_{d=1}^m d\sum_{i_1=1}^{\lfloor \frac{m}{d}\rfloor} \sum_{i_2=1}^{\lfloor \frac{m}{d}\rfloor} \sum_{i_3=1}^{\lfloor \frac{m}{d}\rfloor} ...\sum_{i_n=1}^{\lfloor \frac{m}{d}\rfloor} \sum_{t|i_1,t|i_2,t|i_3,...,t|i_n} \mu(t) \\\\ &= \sum_{d=1}^m \lfloor \frac{m}{T}\rfloor^n \sum_{d|T} d \mu(\frac{T}{d}) \\\\ &= \sum_{d=1}^m \lfloor \frac{m}{T}\rfloor^n \varphi(T) \end{align}​</script><p>然而这道题的数据范围是 $10 \le n,m \le 10^{11}​$，所以单纯用整除分块是不够的，所以还需要用杜教筛。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tr1/unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">tr1::<span class="built_in">unordered_map</span> &lt;ull, ull&gt; h;</span><br><span class="line">ull phi[MAXN], p[MAXN], tot, sum[MAXN], n, m, ans;</span><br><span class="line"><span class="keyword">bool</span> chk[MAXN];</span><br><span class="line"><span class="function">ull <span class="title">qpow</span><span class="params">(ull a, ull b)</span> </span>&#123;</span><br><span class="line">    ull res = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seive</span><span class="params">(ull n)</span> </span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!chk[i]) &#123;</span><br><span class="line">            p[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= n; j++) &#123;</span><br><span class="line">            chk[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j]) &#123;</span><br><span class="line">                phi[i * p[j]] = phi[i] * phi[p[j]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                phi[i * p[j]] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + phi[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">djseive</span><span class="params">(ull n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">10000000</span>) <span class="keyword">return</span> sum[n];</span><br><span class="line">    <span class="keyword">if</span> (h[n]) <span class="keyword">return</span> h[n];</span><br><span class="line">    ull ans = (n &amp; <span class="number">1</span>) ? (n + <span class="number">1</span>) / <span class="number">2</span> * n : n / <span class="number">2</span> * (n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ull l = <span class="number">2</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        r = n / (n / l);</span><br><span class="line">        ans -= (r - l + <span class="number">1L</span>L) * djseive(n / l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h[n] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%llu%llu"</span>, &amp;n, &amp;m);</span><br><span class="line">    seive(<span class="number">10000000</span>);</span><br><span class="line">    <span class="keyword">for</span> (ull l = <span class="number">1</span>, r; l &lt;= m; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        r = m / (m / l);</span><br><span class="line">        ans += (djseive(r) - djseive(l - <span class="number">1</span>)) * qpow(m / l, n); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llu"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6491&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="LOJ" scheme="https://stevebraveman.github.io/blog/tags/LOJ/"/>
    
      <category term="数论" scheme="https://stevebraveman.github.io/blog/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="杜教筛" scheme="https://stevebraveman.github.io/blog/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
      <category term="莫比乌斯反演" scheme="https://stevebraveman.github.io/blog/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>-算法讲解-数论-莫比乌斯反演- 莫比乌斯反演讲解</title>
    <link href="https://stevebraveman.github.io/blog/2019/08/20/96/"/>
    <id>https://stevebraveman.github.io/blog/2019/08/20/96/</id>
    <published>2019-08-20T12:13:29.000Z</published>
    <updated>2019-08-21T13:19:36.297Z</updated>
    
    <content type="html"><![CDATA[<p>莫比乌斯反演是一种非常实用<del>而且装逼</del>的算法，它以容斥为基础，来解决一些复杂的数学问题。</p><p>先给出莫比乌斯反演的公式：</p><p>设定义在自然数集合中的两个函数 $F(x)$ 和 $f(x)$，若这两个函数满足条件：</p><script type="math/tex; mode=display">F(n)=\sum_{d|n}f(d)</script><p>那么则会有：</p><p>$f(n)=\sum_{d|n}\mu(d)F(\frac{n}{d})$</p><p>其中 $\mu$ 为莫比乌斯函数，可以在我的<a href="/2019/03/18/71/">这篇文章</a>中了解关于莫比乌斯函数的知识。</p><p>下面我们来证明这个公式。</p><p>首先需要了解狄利克雷卷积的一些性质（注：以下出现的函数都是定义在自然数集合上的）：</p><p>设 $*$ 为狄利克雷卷积。</p><p>若有两个函数 $f$ 和 $g$，且 $f=g$，那么就有：$f * h=g * h$，其中，$h​$ 为另一个函数。</p><p>对于三个函数 $f​$、$g​$、$h​$，则会有 $f * (g * h) = (f * g) * h​$。</p><p>以上就是需要了解的知识。</p><p>$\because F(n)=\sum_{d|n}f(d)​$</p><p>$\therefore F=f*I$（$I$ 为不变函数，此函数的值恒为 $1$）</p><p>$\therefore F * \mu = f * I * \mu$</p><p>$\because I * \mu = \epsilon​$（$\epsilon​$ 为原函数，$\epsilon(n) = [n = 1]​$）</p><p>$\therefore F * \mu = f * \epsilon$</p><p>又 $\because f * \epsilon = f$</p><p>$\therefore F*\mu=f​$</p><p>$\therefore f(n)=\sum_{d|n}\mu(d) F(\frac{n}{d})$</p><p>Q.E.D</p><p>对于一些莫比乌斯反演的题，千万别忘了一个重要的东西：</p><script type="math/tex; mode=display">\mu * I=\epsilon</script><p>这个等式在推柿子中很有用，所以一定要记住。<del>我就是因为忘了这个所以有好长一段时间不理解大多数式子是怎么推出来的</del></p><p>举个例子：</p><p>求： </p><script type="math/tex; mode=display">\sum_{i=1}^n \sum_{j=1}^m [\gcd(i,j)=1]​</script><p>那么这个柿子就可以这么推：</p><script type="math/tex; mode=display">\begin{align}\sum_{i=1}^n \sum_{j=1}^m [\gcd(i,j)=1] &= \sum_{i=1}^n \sum_{j=1}^m \epsilon(\gcd(i,j)) \\\\ &= \sum_{i=1}^n \sum_{j=1}^m \mu*I \\\\ &= \sum_{i=1}^n \sum_{j=1}^m \sum_{d|\gcd(i,j)}\mu(d) \\\\ &= \sum_{i=1}^n \sum_{j=1}^m \sum_{d|i} \sum_{d|j} \mu(d) \\\\\ &=\sum_{d=1}^n \mu(d) \sum_{i=1}^n \sum_{d|i} \sum_{j=1}^n \sum_{d|j} 1 \\\\ &= \sum_{d=1} \mu(d) \lfloor \frac{n}{d} \rfloor \lfloor \frac{m}{d} \rfloor \end{align}</script><p>接下来是一些关于莫比乌斯反演的练习题：</p><p><a href="https://www.luogu.org/problem/P3327" target="_blank" rel="noopener">[SDOI2015]约数个数和</a></p><p><a href="https://www.luogu.org/problem/P3455" target="_blank" rel="noopener">[POI2007]ZAP-Queries</a></p><p><a href="https://www.luogu.org/problem/P2257" target="_blank" rel="noopener">YY的GCD</a></p><p>如果有什么讲解错误，请在下面的评论中指出<del>（毕竟百密一疏）</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;莫比乌斯反演是一种非常实用&lt;del&gt;而且装逼&lt;/del&gt;的算法，它以容斥为基础，来解决一些复杂的数学问题。&lt;/p&gt;
&lt;p&gt;先给出莫比乌斯反演的公式：&lt;/p&gt;
&lt;p&gt;设定义在自然数集合中的两个函数 $F(x)$ 和 $f(x)$，若这两个函数满足条件：&lt;/p&gt;
&lt;script
      
    
    </summary>
    
    
      <category term="数论" scheme="https://stevebraveman.github.io/blog/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="算法讲解" scheme="https://stevebraveman.github.io/blog/tags/%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
    
      <category term="莫比乌斯反演" scheme="https://stevebraveman.github.io/blog/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>-学习笔记-虚树- 虚树学习笔记</title>
    <link href="https://stevebraveman.github.io/blog/2019/08/17/95/"/>
    <id>https://stevebraveman.github.io/blog/2019/08/17/95/</id>
    <published>2019-08-17T06:19:41.000Z</published>
    <updated>2019-08-20T01:14:58.422Z</updated>
    
    <content type="html"><![CDATA[<p><del>今天是个好日子！</del></p><p>最近学了<del>非常酷炫的</del>虚树，感觉这个算法挺实用的。</p><p>虚树的做法就是把有用的点及其它们的<code>LCA</code>拎出来，无关的点给丢掉，这样就大大优化了树形dp的复杂度。</p><p>设有效节点为 $k$ 个，则建虚树的时间复杂度为 $O(k \log n)$，在虚树上进行树形dp的时间复杂度为  $O(k)​$。</p><p>下面的代码展示了如何建虚树：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!top) &#123;</span><br><span class="line">        st[++top] = x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lca = LCA(st[top], x);</span><br><span class="line">    <span class="keyword">if</span> (lca == st[top]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (top &amp;&amp; id[st[top - <span class="number">1</span>]] &gt;= id[lca]) &#123;</span><br><span class="line">        v[st[top - <span class="number">1</span>]].push_back(st[top]);</span><br><span class="line">        top--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lca != st[top]) &#123;</span><br><span class="line">        v[lca].push_back(st[top]);</span><br><span class="line">        st[top] = lca;</span><br><span class="line">    &#125;</span><br><span class="line">    st[++top] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码展示了如何用栈来维护这些点。</p><p>然后就是一道例题：</p><p><a href="https://www.luogu.org/problem/P2495" target="_blank" rel="noopener">[SDOI2011]消耗战</a>：</p><p>这题数据范围较大，但是k较小，$O(nm)$ 的DP肯定过不去，所以考虑使用虚树优化，将复杂度降低为 $O(k)$。</p><p>献上AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 250010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nx, w;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], ecnt, n, m, x, y, z, id[MAXN], dep[MAXN], son[MAXN], k;</span><br><span class="line"><span class="keyword">int</span> si[MAXN], st[MAXN], tp, top[MAXN], fa[MAXN], tim, mi[MAXN], a[MAXN];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id[a] &lt; id[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f], w&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    dep[u] = d;</span><br><span class="line">    si[u] = <span class="number">1</span>;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (to == f) <span class="keyword">continue</span>;</span><br><span class="line">        mi[to] = <span class="built_in">std</span>::min(mi[u], e[i].w);</span><br><span class="line">        dfs1(to, u, d + <span class="number">1</span>);</span><br><span class="line">        si[u] += si[to];</span><br><span class="line">        <span class="keyword">if</span> (si[to] &gt; si[son[u]]) son[u] = to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> topf)</span> </span>&#123;</span><br><span class="line">    top[u] = topf;</span><br><span class="line">    id[u] = ++tim;</span><br><span class="line">    <span class="keyword">if</span> (!son[u]) <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u], topf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (to == fa[u] || to == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(to, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tp == <span class="number">1</span>) &#123;</span><br><span class="line">        st[++tp] = x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lca = LCA(st[tp], x);</span><br><span class="line">    <span class="keyword">if</span> (lca == st[tp]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (tp &gt; <span class="number">1</span> &amp;&amp; id[st[tp - <span class="number">1</span>]] &gt;= id[lca]) &#123;</span><br><span class="line">        v[st[tp - <span class="number">1</span>]].push_back(st[tp]);</span><br><span class="line">        tp--;</span><br><span class="line">        <span class="comment">// printf("%d -&gt; %d\n", st[tp - 1], st[tp]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lca != st[tp]) &#123;</span><br><span class="line">        v[lca].push_back(st[tp]);</span><br><span class="line">        st[tp] = lca;</span><br><span class="line">    &#125;</span><br><span class="line">    st[++tp] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v[u].size() == <span class="number">0</span>) <span class="keyword">return</span> mi[u];</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)v[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = v[u][i];</span><br><span class="line">        <span class="comment">// printf("%d\n", to);</span></span><br><span class="line">        ans += dp(to);</span><br><span class="line">    &#125;</span><br><span class="line">    v[u].clear();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::min(ans, mi[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        add(x, y, z);</span><br><span class="line">        add(y, x, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(mi, <span class="number">0x7f</span>, <span class="keyword">sizeof</span>(mi));</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + <span class="number">1</span> + k, cmp);</span><br><span class="line">        tp = <span class="number">1</span>;</span><br><span class="line">        st[tp] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            build(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// puts("");</span></span><br><span class="line">        <span class="comment">// puts("----");</span></span><br><span class="line">        <span class="keyword">while</span> (tp &gt; <span class="number">0</span>) v[st[tp - <span class="number">1</span>]].push_back(st[tp]), tp--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// puts("----");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>原谅我写这么简短的学习笔记</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;今天是个好日子！&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;最近学了&lt;del&gt;非常酷炫的&lt;/del&gt;虚树，感觉这个算法挺实用的。&lt;/p&gt;
&lt;p&gt;虚树的做法就是把有用的点及其它们的&lt;code&gt;LCA&lt;/code&gt;拎出来，无关的点给丢掉，这样就大大优化了树形dp的复杂度。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://stevebraveman.github.io/blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="虚树" scheme="https://stevebraveman.github.io/blog/tags/%E8%99%9A%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>-数论- [CF1200C]Round Corridor</title>
    <link href="https://stevebraveman.github.io/blog/2019/08/14/94/"/>
    <id>https://stevebraveman.github.io/blog/2019/08/14/94/</id>
    <published>2019-08-13T23:55:37.000Z</published>
    <updated>2019-08-14T00:09:53.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="http://codeforces.com/problemset/problem/1200/C" target="_blank" rel="noopener">Link</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>通过观察，我们可以发现，如果两个位置之间有完整的墙挡住时，那么这两个位置就不能互相到达。</p><p><del>再观察，</del>我们又可以发现，这个东西和最大公约数有关。</p><p>因此我们可以设 $g=\gcd(n,m)$，把一号区域分成大小为 $\frac{n}{g}$ 的块，把二号区域分成大小为 $\frac{m}{g}$ 的块，每层区域块的个数都是 $g$。</p><p>然后判断这两个位置所在块的编号是否相同就行了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll n, m, a, b, g, f[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> x, y, q;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">gcd</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    g = gcd(n, m);</span><br><span class="line">    f[<span class="number">1</span>] = n / g;</span><br><span class="line">    f[<span class="number">2</span>] = m / g;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%I64d%d%I64d"</span>, &amp;x, &amp;a, &amp;y, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> ((a / f[x] + ((a % f[x]) != <span class="number">0</span>)) != (b / f[y] + ((b % f[y]) != <span class="number">0</span>))) <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/1200/C&quot; targ
      
    
    </summary>
    
    
      <category term="数论" scheme="https://stevebraveman.github.io/blog/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="Codeforces" scheme="https://stevebraveman.github.io/blog/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>-主席树-树链剖分-LCA- [洛谷 P2633]Count on a tree</title>
    <link href="https://stevebraveman.github.io/blog/2019/08/07/93/"/>
    <id>https://stevebraveman.github.io/blog/2019/08/07/93/</id>
    <published>2019-08-07T01:17:11.000Z</published>
    <updated>2019-09-22T06:54:48.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problem/P2633" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>为了应对这种强制在线求第K大的情况，我不得不去学了一个主席树。。。</p><p><del>真是恶！</del></p><p>在进行<code>DFS</code>的时候，每递归到一个节点都在主席树上插入一下。</p><p>最后再进行树上差分就可以了。</p><p>这道题我调了两天，最后才发现竟然是求<code>LCA</code>时将<code>fa[top[x]]</code>写成了<code>fa[x]</code>；</p><p><img alt="" data-src="/blog/img/pt.png" class="lozad"></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// #pragma comment(linker, "/STACK:1024000000,1024000000") </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK puts(<span class="meta-string">"OK"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">bool</span> p1;</span><br><span class="line"><span class="keyword">int</span> a[MAXN * <span class="number">20</span>], b[MAXN], f[MAXN], ls[MAXN * <span class="number">20</span>], rs[MAXN * <span class="number">20</span>], tot = <span class="number">0</span>, rt[MAXN], lans;</span><br><span class="line"><span class="keyword">int</span> siz[MAXN], id[MAXN], son[MAXN], fa[MAXN], dep[MAXN], tim, top[MAXN], len;</span><br><span class="line"><span class="keyword">int</span> head[MAXN], ecnt;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">_t</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    T f = <span class="number">1</span>;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &gt; <span class="string">'9'</span> || c &lt; <span class="string">'0'</span>) &#123;<span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + c - <span class="string">'0'</span>; c = getchar();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nx;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f]&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> &amp;y, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    y = ++tot;</span><br><span class="line">    a[y] = a[x] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) rs[y] = rs[x], insert(l, m, ls[x], ls[y], p);</span><br><span class="line">    <span class="keyword">else</span> ls[y] = ls[x], insert(m + <span class="number">1</span>, r, rs[x], rs[y], p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> ft, <span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    dep[u] = d;</span><br><span class="line">    fa[u] = ft;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    insert(<span class="number">1</span>, len, rt[ft], rt[u], b[u]);</span><br><span class="line">    <span class="comment">// printf("%d %d %d %d %d\n", ft, u, b[u], d, rt[u]);</span></span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (to == ft) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(u, to, d + <span class="number">1</span>);</span><br><span class="line">        siz[u] += siz[to];</span><br><span class="line">        <span class="keyword">if</span> (siz[son[u]] &lt; siz[to]) son[u] = to;</span><br><span class="line">        <span class="comment">// printf("%d\n", u);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> topf)</span> </span>&#123;</span><br><span class="line">    top[u] = topf;</span><br><span class="line">    <span class="keyword">if</span> (!son[u]) <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u], topf);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (to == fa[u] || to == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(to, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> la, <span class="keyword">int</span> fala, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> p = a[ls[y]] + a[ls[x]] - a[ls[la]] - a[ls[fala]];</span><br><span class="line">    <span class="keyword">if</span> (p &gt;= k) <span class="keyword">return</span> ask(l, m, ls[x], ls[y], ls[la], ls[fala], k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ask(m + <span class="number">1</span>, r, rs[x], rs[y], rs[la], rs[fala], k - p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, l, r, k, x, y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("data.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("data.out", "w", stdout);</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        read(b[i]);</span><br><span class="line">        f[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(f + <span class="number">1</span>, f + <span class="number">1</span> + n);</span><br><span class="line">    len = <span class="built_in">std</span>::unique(f + <span class="number">1</span>, f + <span class="number">1</span> + n) - f - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        b[i] = <span class="built_in">std</span>::lower_bound(f + <span class="number">1</span>, f + <span class="number">1</span> + len, b[i]) - f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        read(x), read(y);</span><br><span class="line">        add(x, y);</span><br><span class="line">        add(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        read(l), read(r), read(k);</span><br><span class="line">        l = lans ^ l;</span><br><span class="line">        <span class="keyword">int</span> lc = LCA(l, r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lans = f[ask(<span class="number">1</span>, len, rt[l], rt[r], rt[lc], rt[fa[lc]], k)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2633&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="LCA" scheme="https://stevebraveman.github.io/blog/tags/LCA/"/>
    
      <category term="树链剖分" scheme="https://stevebraveman.github.io/blog/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="主席树" scheme="https://stevebraveman.github.io/blog/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>-多项式-NTT/FFT- 多项式板子合集</title>
    <link href="https://stevebraveman.github.io/blog/2019/07/10/92/"/>
    <id>https://stevebraveman.github.io/blog/2019/07/10/92/</id>
    <published>2019-07-10T11:01:15.000Z</published>
    <updated>2019-08-08T10:42:46.859Z</updated>
    
    <content type="html"><![CDATA[<p>下面是多项式的一些操作，包含了NTT，求逆，求 $\ln$，求导，求积分，求 $e^x$，开根，快速幂，三角函数和反三角函数。</p><p><del>多项式除法先咕着</del></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I 86583718</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + c - <span class="string">'0'</span>; c = getchar();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (<span class="number">1L</span>L * res * a) % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (<span class="number">1L</span>L * a * a) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[MAXN], b[MAXN], f[MAXN], rev[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1L</span>L * i &lt; rev[i]) &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> wn = qpow(G, (MOD - <span class="number">1</span>) / ((<span class="keyword">long</span> <span class="keyword">long</span>)i &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += ((<span class="keyword">long</span> <span class="keyword">long</span>)i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="number">1L</span>L;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k, w = <span class="number">1L</span>L * w * wn % MOD) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[j + k], y = <span class="number">1L</span>L * w * a[j + k + i] % MOD;</span><br><span class="line">                a[j + k] = (x + y) % MOD, a[j + k + i] = (x - y + MOD) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = qpow(n, MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">std</span>::reverse(a + <span class="number">1</span>, a + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = <span class="number">1L</span>L * a[i] * tmp % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">1</span>) &#123;</span><br><span class="line">        b[<span class="number">0</span>] = qpow(a[<span class="number">0</span>], MOD - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv((d + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, a, b);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, _n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (_n &lt; (d &lt;&lt; <span class="number">1</span>)) _n &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; _n; i++) &#123;</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | (((<span class="keyword">long</span> <span class="keyword">long</span>)i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) c[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt; _n; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">    ntt(c, _n, <span class="number">1</span>);</span><br><span class="line">    ntt(b, _n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; i++) &#123;</span><br><span class="line">        b[i] = (<span class="number">2</span> - <span class="number">1L</span>L * b[i] * c[i] % MOD + MOD) % MOD * b[i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    ntt(b, _n, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt; _n; i++) &#123;</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[MAXN], e[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deriv</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; l; i++) &#123;</span><br><span class="line">        b[i - <span class="number">1</span>] = <span class="number">1L</span>L * a[i] * i % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    b[l - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Integ</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; l; i++) &#123;</span><br><span class="line">        b[i] = <span class="number">1L</span>L * a[i - <span class="number">1</span>] * qpow(i, MOD - <span class="number">2</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ln</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * k; i++) d[i] = <span class="number">0</span>;</span><br><span class="line">    inv(k, a, d);</span><br><span class="line">    Deriv(a, e, k);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, _n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (_n &lt; (k &lt;&lt; <span class="number">1</span>)) _n &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; _n; i++) &#123;</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | (((<span class="keyword">long</span> <span class="keyword">long</span>)i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ntt(e, _n, <span class="number">1</span>);</span><br><span class="line">    ntt(d, _n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; i++) &#123;</span><br><span class="line">        e[i] = <span class="number">1L</span>L * e[i] * d[i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    ntt(e, _n, <span class="number">-1</span>);</span><br><span class="line">    Integ(e, b, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> g[MAXN], h[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exp</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Exp(a, b, (k + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, _n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (_n &lt; (k &lt;&lt; <span class="number">1</span>)) _n &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; _n; i++) &#123;</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | (((<span class="keyword">long</span> <span class="keyword">long</span>)i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (k &lt;&lt; <span class="number">1</span>); i++) g[i] = h[i] = <span class="number">0</span>;</span><br><span class="line">    Ln(b, g, k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) h[i] = a[i];</span><br><span class="line">    ntt(b, _n, <span class="number">1</span>);</span><br><span class="line">    ntt(h, _n, <span class="number">1</span>);</span><br><span class="line">    ntt(g, _n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; i++) &#123;</span><br><span class="line">        b[i] = <span class="number">1L</span>L * (<span class="number">1L</span>L - g[i] + h[i] + MOD) * b[i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    ntt(b, _n, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; _n; i++) &#123;</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _n = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (_n &lt; (n &lt;&lt; <span class="number">1</span>)) _n &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; _n; i++) &#123;</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | (((<span class="number">1L</span>L * i) &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ntt(a, _n, <span class="number">1</span>);</span><br><span class="line">    ntt(b, _n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; i++) &#123;</span><br><span class="line">        c[i] = <span class="number">1L</span>L * a[i] * b[i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    ntt(c, _n, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fl, tt[MAXN], rr[MAXN], gg[MAXN], pp[MAXN], kk[MAXN], ss[MAXN], yy[MAXN], hh[MAXN], ww[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (n &lt;&lt; <span class="number">2</span>); i++) &#123;</span><br><span class="line">        b[i] = c[i] = h[i] = g[i] = d[i] = e[i] = <span class="number">0</span>;</span><br><span class="line">        tt[i] = rr[i] = kk[i] = ss[i] = yy[i] = hh[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _clr() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (n &lt;&lt; <span class="number">2</span>); i++) &#123;</span><br><span class="line">        ww[i] = pp[i] = gg[i] = tt[i] = rr[i] = kk[i] = ss[i] = yy[i] = hh[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    clear();</span><br><span class="line">    Ln(a, kk, d);</span><br><span class="line">    <span class="keyword">int</span> inv2 = qpow(<span class="number">2</span>, MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        kk[i] = (<span class="number">1L</span>L * kk[i] * inv2) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    clear();</span><br><span class="line">    Exp(kk, b, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> k, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    clear();</span><br><span class="line">    _clr();</span><br><span class="line">    Ln(a, kk, n);</span><br><span class="line">    clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        kk[i] = <span class="number">1L</span>L * kk[i] * k % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    Exp(kk, b, d);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sin</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    clear();</span><br><span class="line">    _clr();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        tt[i] = <span class="number">1L</span>L * a[i] * I % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    Exp(tt, rr, d);</span><br><span class="line">    clear();</span><br><span class="line">    inv(d, rr, gg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        b[i] = <span class="number">1L</span>L * (rr[i] - gg[i] + MOD) * qpow(I * <span class="number">2</span>, MOD - <span class="number">2</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cos</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    clear();</span><br><span class="line">    _clr();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        tt[i] = <span class="number">1L</span>L * a[i] * I % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    Exp(tt, rr, d);</span><br><span class="line">    clear();</span><br><span class="line">    inv(d, rr, gg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        b[i] = <span class="number">1L</span>L * (rr[i] + gg[i]) * qpow(<span class="number">2</span>, MOD - <span class="number">2</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arcsin</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    clear();</span><br><span class="line">    _clr();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        ww[i] = gg[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Deriv(a, tt, d);</span><br><span class="line">    mult(gg, ww, pp, d);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        pp[i] = (MOD - pp[i]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    pp[<span class="number">0</span>] = (pp[<span class="number">0</span>] + <span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="built_in">sqrt</span>(pp, ss, d);</span><br><span class="line">    clear();</span><br><span class="line">    inv(d, ss, yy);</span><br><span class="line">    clear();</span><br><span class="line">    mult(tt, yy, hh, d);</span><br><span class="line">    clear();</span><br><span class="line">    Integ(hh, b, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arctan</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    clear();</span><br><span class="line">    _clr();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        ww[i] = gg[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Deriv(a, tt, d);</span><br><span class="line">    mult(gg, ww, pp, d);</span><br><span class="line">    pp[<span class="number">0</span>] = (<span class="number">1</span> + pp[<span class="number">0</span>]) % MOD;</span><br><span class="line">    clear();</span><br><span class="line">    inv(d, pp, yy);</span><br><span class="line">    clear();</span><br><span class="line">    mult(tt, yy, hh, d);</span><br><span class="line">    clear();</span><br><span class="line">    Integ(hh, b, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(fl);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        read(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Operator */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        write(f[i]), <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面是多项式的一些操作，包含了NTT，求逆，求 $\ln$，求导，求积分，求 $e^x$，开根，快速幂，三角函数和反三角函数。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;多项式除法先咕着&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="多项式" scheme="https://stevebraveman.github.io/blog/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
      <category term="NTT/FFT" scheme="https://stevebraveman.github.io/blog/tags/NTT-FFT/"/>
    
  </entry>
  
  <entry>
    <title>-矩阵运算-矩阵乘法-分块- [洛谷 P5110]块速递推</title>
    <link href="https://stevebraveman.github.io/blog/2019/07/03/91/"/>
    <id>https://stevebraveman.github.io/blog/2019/07/03/91/</id>
    <published>2019-07-03T01:14:06.000Z</published>
    <updated>2019-08-08T10:42:46.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P5110" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>看着如此庞大的数据范围，$O(n \log n)$ 显然过不去。</p><p>所以做这题之前可以先去做一下<a href="https://loj.ac/problem/162" target="_blank" rel="noopener">快速幂 2</a>，学习一下光速幂是如何写的。</p><p>矩乘部分很简单，剩下的就是卡常了。</p><p>卡常技巧1：把 <code>long long</code> 换成 <code>int</code>。</p><p>卡常技巧2：循环展开</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">namespace</span> Mker &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> SA, SB, SC;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%llu%llu%llu"</span>, &amp;SA, &amp;SB, &amp;SC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SA ^= SA &lt;&lt; <span class="number">32</span>, SA ^= SA &gt;&gt; <span class="number">13</span>, SA ^= SA &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t = SA;</span><br><span class="line">        SA = SB, SB = SC, SC ^= t ^ SA; <span class="keyword">return</span> SC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] =a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> Mat <span class="keyword">operator</span> * (Mat a, Mat b) &#123;</span><br><span class="line">    Mat c;</span><br><span class="line">    c.a[<span class="number">0</span>][<span class="number">0</span>] = c.a[<span class="number">1</span>][<span class="number">0</span>] = c.a[<span class="number">0</span>][<span class="number">1</span>] = c.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    c.a[<span class="number">0</span>][<span class="number">0</span>] = (c.a[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1L</span>L * a.a[<span class="number">0</span>][<span class="number">0</span>] * b.a[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1L</span>L * a.a[<span class="number">0</span>][<span class="number">1</span>] * b.a[<span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">    c.a[<span class="number">0</span>][<span class="number">1</span>] = (c.a[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1L</span>L * a.a[<span class="number">0</span>][<span class="number">0</span>] * b.a[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1L</span>L * a.a[<span class="number">0</span>][<span class="number">1</span>] * b.a[<span class="number">1</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">    c.a[<span class="number">1</span>][<span class="number">0</span>] = (c.a[<span class="number">1</span>][<span class="number">0</span>] + <span class="number">1L</span>L * a.a[<span class="number">1</span>][<span class="number">0</span>] * b.a[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1L</span>L * a.a[<span class="number">1</span>][<span class="number">1</span>] * b.a[<span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">    c.a[<span class="number">1</span>][<span class="number">1</span>] = (c.a[<span class="number">1</span>][<span class="number">1</span>] + <span class="number">1L</span>L * a.a[<span class="number">1</span>][<span class="number">0</span>] * b.a[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1L</span>L * a.a[<span class="number">1</span>][<span class="number">1</span>] * b.a[<span class="number">1</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Mat <span class="title">qpow</span><span class="params">(Mat a, ull n)</span> </span>&#123;</span><br><span class="line">    Mat b;</span><br><span class="line">    b.init();</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) b = b * a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">ull sq;</span><br><span class="line">Mat x1[<span class="number">50000</span>], x2[<span class="number">50000</span>], g;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    Mker::init();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    Mat f, a, q;</span><br><span class="line">    a.clear(), q.clear();</span><br><span class="line">    a.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">233</span>, a.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">    a.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    x1[<span class="number">0</span>].init(), x2[<span class="number">0</span>].init();</span><br><span class="line">    sq = <span class="built_in">sqrt</span>(MOD - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    a.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    g = qpow(a, sq);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sq + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        x1[i] = x1[i - <span class="number">1</span>] * a;</span><br><span class="line">        x2[i] = x2[i - <span class="number">1</span>] * g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = (Mker::rand() - <span class="number">1</span>) % <span class="number">1000000006</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">1</span>) ans ^= k;</span><br><span class="line">        q = x1[k % sq] * x2[k / sq];</span><br><span class="line">        ans ^= q.a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P5110&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="分块" scheme="https://stevebraveman.github.io/blog/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="矩阵乘法" scheme="https://stevebraveman.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>-贪心- [CF484A]Bits</title>
    <link href="https://stevebraveman.github.io/blog/2019/06/30/90/"/>
    <id>https://stevebraveman.github.io/blog/2019/06/30/90/</id>
    <published>2019-06-30T00:06:06.000Z</published>
    <updated>2019-08-08T10:42:44.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/CF484A" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>别以为这是个A题就很简单，我差点被坑了。。。。</p><p>这题就是每一位贪心的放 $1$，如果超过 $r$ 了就 <code>break</code> 。</p><p>话说一开始我还想用二分来着，后来发现答案并不单调。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll l, r, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;l, &amp;r);</span><br><span class="line">        ans = l;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; <span class="number">62</span>; i++) &#123;</span><br><span class="line">            ll m = <span class="number">1L</span>L &lt;&lt; i;</span><br><span class="line">            ans |= m;</span><br><span class="line">            <span class="keyword">if</span> (ans &gt; r) &#123;</span><br><span class="line">                ans ^= m;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/CF484A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="贪心" scheme="https://stevebraveman.github.io/blog/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>-数论-逆元- [洛谷 P4881]hby与tkw的基情</title>
    <link href="https://stevebraveman.github.io/blog/2019/06/27/89/"/>
    <id>https://stevebraveman.github.io/blog/2019/06/27/89/</id>
    <published>2019-06-27T09:38:35.000Z</published>
    <updated>2019-09-18T07:53:04.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P4881" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>先把题目转换为人话：</p><p>给定一个数字 $n$，求：</p><script type="math/tex; mode=display">\sum^{\lfloor \frac{n+1}{2} \rfloor}_{i=1}(2 \times i-1) \times 26 ^ i​</script><p>对于求等差数列平方和等比数列的积的前 $n$ 项和我们可以用<strong>错位相减法</strong>。</p><p>设 $k=\lfloor \frac{n+1}{2} \rfloor, S _ k=\sum^{\lfloor \frac{n+1}{2} \rfloor}_{i=1}(2 \times i-1) \times 26 ^ i​$。</p><p>则：$26 \times S_k=\sum^{\lfloor \frac{n+1}{2} \rfloor}_{i=1}(2 \times i-1) \times 26 ^ {i+1}​$</p><p>所以：</p><script type="math/tex; mode=display">\begin{align}25 \times S_k &= 26 \times S_k-S_k \\\ &= \sum^{\lfloor \frac{n+1}{2} \rfloor}_{i=1}(2 \times i-1) \times 26 ^ {i+1}-\sum^{k}_{i=1}(2 \times i-1) \times 26 ^ i \\\ &= (2\times k-1)\times 26^k -\frac{2 \times 26 \times(26^k-1)}{25}-26 \end{align}</script><p>再用快速幂和逆元随便瞎搞搞就可以了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (res * a) % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (a * a) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">        n = (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (((<span class="number">2</span> * n - <span class="number">1</span>) * qpow(<span class="number">26</span>, n + <span class="number">1</span>, MOD) % MOD - <span class="number">26</span> * (qpow(<span class="number">26</span>, n, MOD) - <span class="number">1</span>) % MOD * qpow(<span class="number">25</span>, MOD - <span class="number">2</span>, MOD) * <span class="number">2</span> % MOD + <span class="number">26</span> + MOD) % MOD) * qpow(<span class="number">25</span>, MOD - <span class="number">2</span>, MOD) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4881&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="数论" scheme="https://stevebraveman.github.io/blog/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="逆元" scheme="https://stevebraveman.github.io/blog/tags/%E9%80%86%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>-数论-欧拉定理- 有关无理数取余的一些想法</title>
    <link href="https://stevebraveman.github.io/blog/2019/06/24/88/"/>
    <id>https://stevebraveman.github.io/blog/2019/06/24/88/</id>
    <published>2019-06-24T03:12:52.000Z</published>
    <updated>2019-08-08T10:42:32.676Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道针对有理数取余我们可以用费马小定理（欧拉定理）或者是扩展欧几里得求逆元得到。</p><p>但是现在，我们也可以根据（扩展）欧拉定理来进行无理数取余。</p><a id="more"></a><p>因为 $a^b \equiv a^{b \% \varphi(p)} \pmod p,\gcd(a,p)=1$。</p><p>所以可以把 $b$ 换为有理数，那么取余的对象就变成了根式。</p><p>但是这并不对所有的数据都适用，因为要满足 $\gcd(\varphi(p),b)=1$ ，其中 $b$ 为所要求逆元的数。 </p><p>尽管存在这个，但并没有说无理数取余是完全不可能，在特殊的数据下还是可以的，比如说 $\sqrt[3]{2} \equiv 3 \pmod 5$。</p><p><del>看，证明什么的都没有，多简洁</del></p><p>Update 2019.6.25</p><p>今天听说了一个叫二次剩余的东西，貌似我这个无理数取余没什么卵用了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道针对有理数取余我们可以用费马小定理（欧拉定理）或者是扩展欧几里得求逆元得到。&lt;/p&gt;
&lt;p&gt;但是现在，我们也可以根据（扩展）欧拉定理来进行无理数取余。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://stevebraveman.github.io/blog/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="欧拉定理" scheme="https://stevebraveman.github.io/blog/tags/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>-树链剖分-线段树- [洛谷 P4116]Qtree3</title>
    <link href="https://stevebraveman.github.io/blog/2019/06/05/87/"/>
    <id>https://stevebraveman.github.io/blog/2019/06/05/87/</id>
    <published>2019-06-05T06:07:59.000Z</published>
    <updated>2019-08-08T10:43:03.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/P4116" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题看到别人都用了很多高端的做法，但我太菜了，所以就只好用了一个线段树做法。</p><p>这里我用了一个树链剖分的性质：从根到一个节点的路径上的序号一定是单调递增的。</p><p>根据这个性质，我们可以有如下思路：</p><p>一开始，树上所有的点的点权都赋值成 $INF$ ，如果一个点被修改成了黑点，<strong>就把这个点赋值成这个点的编号</strong>，查询的时候做区间最小值就行了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) ((x) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) ((x) &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nx;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Tp &amp;a, Tp &amp;b)</span> </span>&#123;</span><br><span class="line">    Tp t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function">Tp <span class="title">max</span><span class="params">(Tp a, Tp b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function">Tp <span class="title">min</span><span class="params">(Tp a, Tp b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> head[MAXN], ecnt, n, m, x, y, dep[MAXN], si[MAXN], wt[MAXN], w[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN], top[MAXN], son[MAXN], cnt, r = <span class="number">1</span>, id[MAXN], nid[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f]&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segtree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[MAXN], tmin[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        tmin[p] = min(tmin[ls(p)], tmin[rs(p)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tmin[p] = INF;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(l, m, ls(p));</span><br><span class="line">        build(m + <span class="number">1</span>, r, rs(p));</span><br><span class="line">        pd(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updated</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tmin[p] = k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= m) updated(x, l, m, ls(p), k);</span><br><span class="line">        <span class="keyword">else</span> updated(x, m + <span class="number">1</span>, r, rs(p), k);</span><br><span class="line">        pd(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">qmin</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = INF;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> tmin[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= m) s = min(qmin(x, y, l, m, ls(p)), s);</span><br><span class="line">        <span class="keyword">if</span> (y &gt; m) s = min(qmin(x, y, m + <span class="number">1</span>, r, rs(p)), s);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> (tmin[p] == INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= m) <span class="keyword">return</span> ask(x, l, m, ls(p));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ask(x, m + <span class="number">1</span>, r, rs(p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line">    dep[u] = deep;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    si[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (to == f) <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(to, u, deep + <span class="number">1</span>);</span><br><span class="line">        si[u] += si[to];</span><br><span class="line">        <span class="keyword">if</span> (si[to] &gt; si[son[u]]) son[u] = to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> topf)</span> </span>&#123;</span><br><span class="line">    id[u] = ++cnt;</span><br><span class="line">    nid[cnt] = u;</span><br><span class="line">    top[u] = topf;</span><br><span class="line">    <span class="keyword">if</span> (!son[u]) <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u], topf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (fa[u] == to || to == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(to, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qrs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) swap(x, y);</span><br><span class="line">        ans = min(ans, tr.qmin(id[top[x]], id[x], <span class="number">1</span>, n, <span class="number">1</span>));</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) swap(x, y);</span><br><span class="line">    ans = min(tr.qmin(id[x], id[y], <span class="number">1</span>, n, <span class="number">1</span>), ans);</span><br><span class="line">    <span class="keyword">if</span> (ans == INF) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> nid[ans];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ans = tr.ask(id[x], <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// puts("-----");</span></span><br><span class="line">    <span class="comment">// printf("%d\n", ans);</span></span><br><span class="line">    <span class="comment">// puts("-----");</span></span><br><span class="line">    <span class="keyword">if</span> (ans) &#123;</span><br><span class="line">        tr.updated(id[x], <span class="number">1</span>, n, <span class="number">1</span>, id[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        tr.updated(id[x], <span class="number">1</span>, n, <span class="number">1</span>, INF);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        add(x, y);</span><br><span class="line">        add(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(r, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(r, r);</span><br><span class="line">    tr.build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">// printf("%d ", id[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// puts("");</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">            update(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qrs(<span class="number">1</span>, y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4116&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="洛谷" scheme="https://stevebraveman.github.io/blog/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="线段树" scheme="https://stevebraveman.github.io/blog/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="树链剖分" scheme="https://stevebraveman.github.io/blog/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>-图论-拓扑排序- [CF1131D]Gourmet choice</title>
    <link href="https://stevebraveman.github.io/blog/2019/05/26/86/"/>
    <id>https://stevebraveman.github.io/blog/2019/05/26/86/</id>
    <published>2019-05-26T09:27:30.000Z</published>
    <updated>2019-08-08T10:43:22.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.luogu.org/problemnew/show/CF1131D" target="_blank" rel="noopener">Link</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong><em>并查集 + 拓扑排序</em></strong></p><p>那么我们该怎样用并查集和拓扑排序呢</p><p>思路很简单，把标有<code>=</code>的i和j放在同一个并查集内，然后根据题意连边，如果是<code>&gt;</code>，就这么连：i所在集合的标号 <code>-&gt;</code> j所在集合的标号，如果是<code>&gt;</code>那么就相反。当然，你也可以和我的意思相反，就是在赋值上有些麻烦。</p><p>连完边后，直接跑拓扑就可以了，别忘了在拓扑排序的时候给点赋值</p><p>也别忘了判断一下有没有环，如果有环，那么就不存在。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2000100</span></span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, head[MAXN], ecnt, x, y, ent[MAXN], out[MAXN], rank[MAXN], p, deli[MAXN], fa[MAXN], ans, tot;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN], ifq[MAXN];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nx;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    e[++ecnt] = (Edge) &#123;t, head[f]&#125;;</span><br><span class="line">    head[f] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fa[x] = find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">un</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = find(x);</span><br><span class="line">    y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (rank[x] &lt;= rank[y]) &#123;</span><br><span class="line">        fa[x] = y;</span><br><span class="line">        <span class="keyword">if</span> (rank[x] == rank[y]) &#123;</span><br><span class="line">            rank[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        fa[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">        rank[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[i][j] == <span class="string">'='</span>) &#123;</span><br><span class="line">                un(i, j + n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            x = find(j + n);</span><br><span class="line">            y = find(i);</span><br><span class="line">            <span class="keyword">if</span> (mp[i][j] == <span class="string">'&gt;'</span>) &#123;</span><br><span class="line">                add(x, y);</span><br><span class="line">                ent[y]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mp[i][j] == <span class="string">'&lt;'</span>) &#123;</span><br><span class="line">                add(y, x);</span><br><span class="line">                ent[x]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tot = n + m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        p = find(i);</span><br><span class="line">        <span class="keyword">if</span> (!ent[p] &amp;&amp; !ifq[p]) &#123;</span><br><span class="line">            q.push(p);</span><br><span class="line">            ifq[p] = <span class="number">1</span>;</span><br><span class="line">            deli[p] = <span class="number">1</span>;</span><br><span class="line">            deli[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nx) &#123;</span><br><span class="line">            <span class="keyword">int</span> to = e[i].v;</span><br><span class="line">            <span class="keyword">if</span> (vis[to]) <span class="keyword">continue</span>;</span><br><span class="line">            ent[to]--;</span><br><span class="line">            <span class="keyword">if</span> (!ent[to]) &#123;</span><br><span class="line">                deli[to] = deli[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ent[find(i)]) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n + m; i++) &#123;</span></span><br><span class="line">    <span class="comment">// printf("%d ", ent[find(i)]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// puts("");</span></span><br><span class="line">    <span class="keyword">if</span> (tot != ans) &#123;</span><br><span class="line">        <span class="comment">// printf("%d %d\n", tot, ans);</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = find(i);</span><br><span class="line">        deli[i] = deli[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, deli[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, deli[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/CF1131D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://stevebraveman.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="拓扑排序" scheme="https://stevebraveman.github.io/blog/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="Codeforces" scheme="https://stevebraveman.github.io/blog/tags/Codeforces/"/>
    
  </entry>
  
</feed>
